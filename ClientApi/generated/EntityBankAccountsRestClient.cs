// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using ContasimpleAPI.Models;

namespace ContasimpleAPI
{
    internal partial class EntityBankAccountsRestClient
    {
        private Uri endpoint;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of EntityBankAccountsRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        public EntityBankAccountsRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            endpoint ??= new Uri("https://api.contasimple.com");

            this.endpoint = endpoint;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateGetListRequest(long entityId, string version, Enum313? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/entities/", false);
            uri.AppendPath(entityId, true);
            uri.AppendPath("/bankaccounts", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            return message;
        }

        /// <summary> Gets the bank accounts associated to an entity. </summary>
        /// <param name="entityId"> The identifier of the entity to obtain its bank accounts. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public async Task<Response<ApiListResultEntityBankAccountApiModel>> GetListAsync(long entityId, string version, Enum313? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateGetListRequest(entityId, version, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultEntityBankAccountApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiListResultEntityBankAccountApiModel.DeserializeApiListResultEntityBankAccountApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the bank accounts associated to an entity. </summary>
        /// <param name="entityId"> The identifier of the entity to obtain its bank accounts. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public Response<ApiListResultEntityBankAccountApiModel> GetList(long entityId, string version, Enum313? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateGetListRequest(entityId, version, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultEntityBankAccountApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiListResultEntityBankAccountApiModel.DeserializeApiListResultEntityBankAccountApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateNewEntityBankAccountRequest(string version, string entityId, string entityBankAccount, Enum314? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/entities/", false);
            uri.AppendPath(entityId, true);
            uri.AppendPath("/bankaccounts", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", "text/html");
            request.Content = new StringRequestContent(entityBankAccount);
            return message;
        }

        /// <summary> Creates a new entity bank account. </summary>
        /// <param name="version"> The String to use. </param>
        /// <param name="entityId"> The String to use. </param>
        /// <param name="entityBankAccount"> The information of the entity bank account to create. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/>, <paramref name="entityId"/>, or <paramref name="entityBankAccount"/> is null. </exception>
        public async Task<Response<ApiResultEntityBankAccountApiModel>> NewEntityBankAccountAsync(string version, string entityId, string entityBankAccount, Enum314? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (entityId == null)
            {
                throw new ArgumentNullException(nameof(entityId));
            }
            if (entityBankAccount == null)
            {
                throw new ArgumentNullException(nameof(entityBankAccount));
            }

            using var message = CreateNewEntityBankAccountRequest(version, entityId, entityBankAccount, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultEntityBankAccountApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultEntityBankAccountApiModel.DeserializeApiResultEntityBankAccountApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Creates a new entity bank account. </summary>
        /// <param name="version"> The String to use. </param>
        /// <param name="entityId"> The String to use. </param>
        /// <param name="entityBankAccount"> The information of the entity bank account to create. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/>, <paramref name="entityId"/>, or <paramref name="entityBankAccount"/> is null. </exception>
        public Response<ApiResultEntityBankAccountApiModel> NewEntityBankAccount(string version, string entityId, string entityBankAccount, Enum314? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (entityId == null)
            {
                throw new ArgumentNullException(nameof(entityId));
            }
            if (entityBankAccount == null)
            {
                throw new ArgumentNullException(nameof(entityBankAccount));
            }

            using var message = CreateNewEntityBankAccountRequest(version, entityId, entityBankAccount, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultEntityBankAccountApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultEntityBankAccountApiModel.DeserializeApiResultEntityBankAccountApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateNewEntityBankAccountRequest(string version, string entityId, EntityBankAccountApiModel entityBankAccount, Enum314? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/entities/", false);
            uri.AppendPath(entityId, true);
            uri.AppendPath("/bankaccounts", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(entityBankAccount);
            request.Content = content;
            return message;
        }

        /// <summary> Creates a new entity bank account. </summary>
        /// <param name="version"> The String to use. </param>
        /// <param name="entityId"> The String to use. </param>
        /// <param name="entityBankAccount"> The information of the entity bank account to create. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/>, <paramref name="entityId"/>, or <paramref name="entityBankAccount"/> is null. </exception>
        public async Task<Response<ApiResultEntityBankAccountApiModel>> NewEntityBankAccountAsync(string version, string entityId, EntityBankAccountApiModel entityBankAccount, Enum314? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (entityId == null)
            {
                throw new ArgumentNullException(nameof(entityId));
            }
            if (entityBankAccount == null)
            {
                throw new ArgumentNullException(nameof(entityBankAccount));
            }

            using var message = CreateNewEntityBankAccountRequest(version, entityId, entityBankAccount, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultEntityBankAccountApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultEntityBankAccountApiModel.DeserializeApiResultEntityBankAccountApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Creates a new entity bank account. </summary>
        /// <param name="version"> The String to use. </param>
        /// <param name="entityId"> The String to use. </param>
        /// <param name="entityBankAccount"> The information of the entity bank account to create. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/>, <paramref name="entityId"/>, or <paramref name="entityBankAccount"/> is null. </exception>
        public Response<ApiResultEntityBankAccountApiModel> NewEntityBankAccount(string version, string entityId, EntityBankAccountApiModel entityBankAccount, Enum314? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (entityId == null)
            {
                throw new ArgumentNullException(nameof(entityId));
            }
            if (entityBankAccount == null)
            {
                throw new ArgumentNullException(nameof(entityBankAccount));
            }

            using var message = CreateNewEntityBankAccountRequest(version, entityId, entityBankAccount, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultEntityBankAccountApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultEntityBankAccountApiModel.DeserializeApiResultEntityBankAccountApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRequest(long entityId, long entityBankAccountId, string version, Enum315? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/entities/", false);
            uri.AppendPath(entityId, true);
            uri.AppendPath("/bankaccounts/", false);
            uri.AppendPath(entityBankAccountId, true);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Removes the entity with the given identifier. </summary>
        /// <param name="entityId"> The identifier of the entity to remove its bank account. </param>
        /// <param name="entityBankAccountId"> The identifier of the entity bank account to remove. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public async Task<Response<ApiResultInt64>> DeleteAsync(long entityId, long entityBankAccountId, string version, Enum315? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateDeleteRequest(entityId, entityBankAccountId, version, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultInt64 value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultInt64.DeserializeApiResultInt64(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Removes the entity with the given identifier. </summary>
        /// <param name="entityId"> The identifier of the entity to remove its bank account. </param>
        /// <param name="entityBankAccountId"> The identifier of the entity bank account to remove. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public Response<ApiResultInt64> Delete(long entityId, long entityBankAccountId, string version, Enum315? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateDeleteRequest(entityId, entityBankAccountId, version, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultInt64 value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultInt64.DeserializeApiResultInt64(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetEntityBankAccountRequest(long entityId, long entityBankAccountId, string version, Enum316? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/entities/", false);
            uri.AppendPath(entityId, true);
            uri.AppendPath("/bankaccounts/", false);
            uri.AppendPath(entityBankAccountId, true);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Gets the bank accounts associated to an entity. </summary>
        /// <param name="entityId"> The identifier of the entity to obtain its bank accounts - not used -. </param>
        /// <param name="entityBankAccountId"> The identifier of the entity bank accountId to get. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public async Task<Response<ApiResultEntityBankAccountApiModel>> GetEntityBankAccountAsync(long entityId, long entityBankAccountId, string version, Enum316? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateGetEntityBankAccountRequest(entityId, entityBankAccountId, version, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultEntityBankAccountApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultEntityBankAccountApiModel.DeserializeApiResultEntityBankAccountApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the bank accounts associated to an entity. </summary>
        /// <param name="entityId"> The identifier of the entity to obtain its bank accounts - not used -. </param>
        /// <param name="entityBankAccountId"> The identifier of the entity bank accountId to get. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public Response<ApiResultEntityBankAccountApiModel> GetEntityBankAccount(long entityId, long entityBankAccountId, string version, Enum316? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateGetEntityBankAccountRequest(entityId, entityBankAccountId, version, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultEntityBankAccountApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultEntityBankAccountApiModel.DeserializeApiResultEntityBankAccountApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePutRequest(long entityBankAccountId, long entityId, string version, string entityBankAccount, Enum317? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/entities/", false);
            uri.AppendPath(entityId, true);
            uri.AppendPath("/bankaccounts/", false);
            uri.AppendPath(entityBankAccountId, true);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", "text/html");
            request.Content = new StringRequestContent(entityBankAccount);
            return message;
        }

        /// <summary> Updates the given entity bank account for the entityId. </summary>
        /// <param name="entityBankAccountId"> The identifier of the entityBankAccount to update. </param>
        /// <param name="entityId"> The information of the entity associated. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="entityBankAccount"> The information of the entityBankAccount to update. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="entityBankAccount"/> is null. </exception>
        public async Task<Response<ApiResultEntityBankAccountApiModel>> PutAsync(long entityBankAccountId, long entityId, string version, string entityBankAccount, Enum317? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (entityBankAccount == null)
            {
                throw new ArgumentNullException(nameof(entityBankAccount));
            }

            using var message = CreatePutRequest(entityBankAccountId, entityId, version, entityBankAccount, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultEntityBankAccountApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultEntityBankAccountApiModel.DeserializeApiResultEntityBankAccountApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Updates the given entity bank account for the entityId. </summary>
        /// <param name="entityBankAccountId"> The identifier of the entityBankAccount to update. </param>
        /// <param name="entityId"> The information of the entity associated. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="entityBankAccount"> The information of the entityBankAccount to update. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="entityBankAccount"/> is null. </exception>
        public Response<ApiResultEntityBankAccountApiModel> Put(long entityBankAccountId, long entityId, string version, string entityBankAccount, Enum317? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (entityBankAccount == null)
            {
                throw new ArgumentNullException(nameof(entityBankAccount));
            }

            using var message = CreatePutRequest(entityBankAccountId, entityId, version, entityBankAccount, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultEntityBankAccountApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultEntityBankAccountApiModel.DeserializeApiResultEntityBankAccountApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePutRequest(long entityBankAccountId, long entityId, string version, EntityBankAccountApiModel entityBankAccount, Enum317? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/entities/", false);
            uri.AppendPath(entityId, true);
            uri.AppendPath("/bankaccounts/", false);
            uri.AppendPath(entityBankAccountId, true);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(entityBankAccount);
            request.Content = content;
            return message;
        }

        /// <summary> Updates the given entity bank account for the entityId. </summary>
        /// <param name="entityBankAccountId"> The identifier of the entityBankAccount to update. </param>
        /// <param name="entityId"> The information of the entity associated. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="entityBankAccount"> The information of the entityBankAccount to update. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="entityBankAccount"/> is null. </exception>
        public async Task<Response<ApiResultEntityBankAccountApiModel>> PutAsync(long entityBankAccountId, long entityId, string version, EntityBankAccountApiModel entityBankAccount, Enum317? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (entityBankAccount == null)
            {
                throw new ArgumentNullException(nameof(entityBankAccount));
            }

            using var message = CreatePutRequest(entityBankAccountId, entityId, version, entityBankAccount, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultEntityBankAccountApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultEntityBankAccountApiModel.DeserializeApiResultEntityBankAccountApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Updates the given entity bank account for the entityId. </summary>
        /// <param name="entityBankAccountId"> The identifier of the entityBankAccount to update. </param>
        /// <param name="entityId"> The information of the entity associated. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="entityBankAccount"> The information of the entityBankAccount to update. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="entityBankAccount"/> is null. </exception>
        public Response<ApiResultEntityBankAccountApiModel> Put(long entityBankAccountId, long entityId, string version, EntityBankAccountApiModel entityBankAccount, Enum317? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (entityBankAccount == null)
            {
                throw new ArgumentNullException(nameof(entityBankAccount));
            }

            using var message = CreatePutRequest(entityBankAccountId, entityId, version, entityBankAccount, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultEntityBankAccountApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultEntityBankAccountApiModel.DeserializeApiResultEntityBankAccountApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
