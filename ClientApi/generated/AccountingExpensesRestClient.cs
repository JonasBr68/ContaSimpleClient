// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using ContasimpleAPI.Models;

namespace ContasimpleAPI
{
    internal partial class AccountingExpensesRestClient
    {
        private Uri endpoint;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of AccountingExpensesRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        public AccountingExpensesRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            endpoint ??= new Uri("https://api.contasimple.com");

            this.endpoint = endpoint;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateListRequest(string period, string version, int? startIndex, int? numRows, Enum82? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/expenses", false);
            if (startIndex != null)
            {
                uri.AppendQuery("startIndex", startIndex.Value, true);
            }
            if (numRows != null)
            {
                uri.AppendQuery("numRows", numRows.Value, true);
            }
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            return message;
        }

        /// <summary> Gets the list of expenses for the current company. </summary>
        /// <param name="period"> The String to use. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="startIndex"> The Integer to use. </param>
        /// <param name="numRows"> The Integer to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="period"/> or <paramref name="version"/> is null. </exception>
        public async Task<Response<ApiListResultExpenseApiModel>> ListAsync(string period, string version, int? startIndex = null, int? numRows = null, Enum82? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateListRequest(period, version, startIndex, numRows, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultExpenseApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiListResultExpenseApiModel.DeserializeApiListResultExpenseApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the list of expenses for the current company. </summary>
        /// <param name="period"> The String to use. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="startIndex"> The Integer to use. </param>
        /// <param name="numRows"> The Integer to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="period"/> or <paramref name="version"/> is null. </exception>
        public Response<ApiListResultExpenseApiModel> List(string period, string version, int? startIndex = null, int? numRows = null, Enum82? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateListRequest(period, version, startIndex, numRows, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultExpenseApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiListResultExpenseApiModel.DeserializeApiListResultExpenseApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateExpenseRequest(string period, string version, string expense, bool? bypassInvoiceDuplicateValidation, Enum83? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/expenses", false);
            if (bypassInvoiceDuplicateValidation != null)
            {
                uri.AppendQuery("bypassInvoiceDuplicateValidation", bypassInvoiceDuplicateValidation.Value, true);
            }
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", "text/html");
            request.Content = new StringRequestContent(expense);
            return message;
        }

        /// <summary> Creates a new expense with the given information. </summary>
        /// <param name="period"> The period where to create the expense. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="expense"> The expense information. </param>
        /// <param name="bypassInvoiceDuplicateValidation"> Bypass the duplicate expenses check by expense number, provider and year. Default to false. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="period"/>, <paramref name="version"/>, or <paramref name="expense"/> is null. </exception>
        public async Task<Response<ApiResultExpenseApiModel>> CreateExpenseAsync(string period, string version, string expense, bool? bypassInvoiceDuplicateValidation = null, Enum83? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (expense == null)
            {
                throw new ArgumentNullException(nameof(expense));
            }

            using var message = CreateCreateExpenseRequest(period, version, expense, bypassInvoiceDuplicateValidation, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultExpenseApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultExpenseApiModel.DeserializeApiResultExpenseApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Creates a new expense with the given information. </summary>
        /// <param name="period"> The period where to create the expense. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="expense"> The expense information. </param>
        /// <param name="bypassInvoiceDuplicateValidation"> Bypass the duplicate expenses check by expense number, provider and year. Default to false. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="period"/>, <paramref name="version"/>, or <paramref name="expense"/> is null. </exception>
        public Response<ApiResultExpenseApiModel> CreateExpense(string period, string version, string expense, bool? bypassInvoiceDuplicateValidation = null, Enum83? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (expense == null)
            {
                throw new ArgumentNullException(nameof(expense));
            }

            using var message = CreateCreateExpenseRequest(period, version, expense, bypassInvoiceDuplicateValidation, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultExpenseApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultExpenseApiModel.DeserializeApiResultExpenseApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateExpenseRequest(string period, string version, CreateExpenseApiModel expense, bool? bypassInvoiceDuplicateValidation, Enum83? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/expenses", false);
            if (bypassInvoiceDuplicateValidation != null)
            {
                uri.AppendQuery("bypassInvoiceDuplicateValidation", bypassInvoiceDuplicateValidation.Value, true);
            }
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(expense);
            request.Content = content;
            return message;
        }

        /// <summary> Creates a new expense with the given information. </summary>
        /// <param name="period"> The period where to create the expense. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="expense"> The expense information. </param>
        /// <param name="bypassInvoiceDuplicateValidation"> Bypass the duplicate expenses check by expense number, provider and year. Default to false. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="period"/>, <paramref name="version"/>, or <paramref name="expense"/> is null. </exception>
        public async Task<Response<ApiResultExpenseApiModel>> CreateExpenseAsync(string period, string version, CreateExpenseApiModel expense, bool? bypassInvoiceDuplicateValidation = null, Enum83? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (expense == null)
            {
                throw new ArgumentNullException(nameof(expense));
            }

            using var message = CreateCreateExpenseRequest(period, version, expense, bypassInvoiceDuplicateValidation, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultExpenseApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultExpenseApiModel.DeserializeApiResultExpenseApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Creates a new expense with the given information. </summary>
        /// <param name="period"> The period where to create the expense. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="expense"> The expense information. </param>
        /// <param name="bypassInvoiceDuplicateValidation"> Bypass the duplicate expenses check by expense number, provider and year. Default to false. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="period"/>, <paramref name="version"/>, or <paramref name="expense"/> is null. </exception>
        public Response<ApiResultExpenseApiModel> CreateExpense(string period, string version, CreateExpenseApiModel expense, bool? bypassInvoiceDuplicateValidation = null, Enum83? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (expense == null)
            {
                throw new ArgumentNullException(nameof(expense));
            }

            using var message = CreateCreateExpenseRequest(period, version, expense, bypassInvoiceDuplicateValidation, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultExpenseApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultExpenseApiModel.DeserializeApiResultExpenseApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteExpenseRequest(string period, long expenseId, string version, bool? deleteCertifiedFiles, Enum84? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/expenses/", false);
            uri.AppendPath(expenseId, true);
            if (deleteCertifiedFiles != null)
            {
                uri.AppendQuery("deleteCertifiedFiles", deleteCertifiedFiles.Value, true);
            }
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Deletes the given expense. </summary>
        /// <param name="period"> The period where to create the expense. </param>
        /// <param name="expenseId"> The expense identifier to remove. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="deleteCertifiedFiles"> True to delete the certified files attached to the expense. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="period"/> or <paramref name="version"/> is null. </exception>
        public async Task<Response<ApiResultInt64>> DeleteExpenseAsync(string period, long expenseId, string version, bool? deleteCertifiedFiles = null, Enum84? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateDeleteExpenseRequest(period, expenseId, version, deleteCertifiedFiles, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultInt64 value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultInt64.DeserializeApiResultInt64(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deletes the given expense. </summary>
        /// <param name="period"> The period where to create the expense. </param>
        /// <param name="expenseId"> The expense identifier to remove. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="deleteCertifiedFiles"> True to delete the certified files attached to the expense. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="period"/> or <paramref name="version"/> is null. </exception>
        public Response<ApiResultInt64> DeleteExpense(string period, long expenseId, string version, bool? deleteCertifiedFiles = null, Enum84? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateDeleteExpenseRequest(period, expenseId, version, deleteCertifiedFiles, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultInt64 value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultInt64.DeserializeApiResultInt64(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRequest(long expenseId, string version, string period, Enum85? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/expenses/", false);
            uri.AppendPath(expenseId, true);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Gets the expense information for the given expense id. </summary>
        /// <param name="expenseId"> The identifier of the expense to retrieve. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public async Task<Response<ApiResultExpenseApiModel>> GetAsync(long expenseId, string version, string period, Enum85? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreateGetRequest(expenseId, version, period, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultExpenseApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultExpenseApiModel.DeserializeApiResultExpenseApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the expense information for the given expense id. </summary>
        /// <param name="expenseId"> The identifier of the expense to retrieve. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public Response<ApiResultExpenseApiModel> Get(long expenseId, string version, string period, Enum85? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreateGetRequest(expenseId, version, period, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultExpenseApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultExpenseApiModel.DeserializeApiResultExpenseApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateExpenseRequest(string period, long expenseId, string version, string expense, bool? bypassInvoiceDuplicateValidation, Enum86? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/expenses/", false);
            uri.AppendPath(expenseId, true);
            if (bypassInvoiceDuplicateValidation != null)
            {
                uri.AppendQuery("bypassInvoiceDuplicateValidation", bypassInvoiceDuplicateValidation.Value, true);
            }
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", "text/html");
            request.Content = new StringRequestContent(expense);
            return message;
        }

        /// <summary> Updates the given expense. </summary>
        /// <param name="period"> The period where to update the expense. </param>
        /// <param name="expenseId"> The expense identifier to update. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="expense"> The expense information. </param>
        /// <param name="bypassInvoiceDuplicateValidation"> Bypass the duplicate expenses check by expense number, provider and year. Default to false. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="period"/>, <paramref name="version"/>, or <paramref name="expense"/> is null. </exception>
        public async Task<Response<ApiResultInt64>> UpdateExpenseAsync(string period, long expenseId, string version, string expense, bool? bypassInvoiceDuplicateValidation = null, Enum86? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (expense == null)
            {
                throw new ArgumentNullException(nameof(expense));
            }

            using var message = CreateUpdateExpenseRequest(period, expenseId, version, expense, bypassInvoiceDuplicateValidation, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultInt64 value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultInt64.DeserializeApiResultInt64(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Updates the given expense. </summary>
        /// <param name="period"> The period where to update the expense. </param>
        /// <param name="expenseId"> The expense identifier to update. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="expense"> The expense information. </param>
        /// <param name="bypassInvoiceDuplicateValidation"> Bypass the duplicate expenses check by expense number, provider and year. Default to false. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="period"/>, <paramref name="version"/>, or <paramref name="expense"/> is null. </exception>
        public Response<ApiResultInt64> UpdateExpense(string period, long expenseId, string version, string expense, bool? bypassInvoiceDuplicateValidation = null, Enum86? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (expense == null)
            {
                throw new ArgumentNullException(nameof(expense));
            }

            using var message = CreateUpdateExpenseRequest(period, expenseId, version, expense, bypassInvoiceDuplicateValidation, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultInt64 value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultInt64.DeserializeApiResultInt64(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateExpenseRequest(string period, long expenseId, string version, UpdateExpenseApiModel expense, bool? bypassInvoiceDuplicateValidation, Enum86? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/expenses/", false);
            uri.AppendPath(expenseId, true);
            if (bypassInvoiceDuplicateValidation != null)
            {
                uri.AppendQuery("bypassInvoiceDuplicateValidation", bypassInvoiceDuplicateValidation.Value, true);
            }
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(expense);
            request.Content = content;
            return message;
        }

        /// <summary> Updates the given expense. </summary>
        /// <param name="period"> The period where to update the expense. </param>
        /// <param name="expenseId"> The expense identifier to update. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="expense"> The expense information. </param>
        /// <param name="bypassInvoiceDuplicateValidation"> Bypass the duplicate expenses check by expense number, provider and year. Default to false. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="period"/>, <paramref name="version"/>, or <paramref name="expense"/> is null. </exception>
        public async Task<Response<ApiResultInt64>> UpdateExpenseAsync(string period, long expenseId, string version, UpdateExpenseApiModel expense, bool? bypassInvoiceDuplicateValidation = null, Enum86? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (expense == null)
            {
                throw new ArgumentNullException(nameof(expense));
            }

            using var message = CreateUpdateExpenseRequest(period, expenseId, version, expense, bypassInvoiceDuplicateValidation, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultInt64 value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultInt64.DeserializeApiResultInt64(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Updates the given expense. </summary>
        /// <param name="period"> The period where to update the expense. </param>
        /// <param name="expenseId"> The expense identifier to update. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="expense"> The expense information. </param>
        /// <param name="bypassInvoiceDuplicateValidation"> Bypass the duplicate expenses check by expense number, provider and year. Default to false. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="period"/>, <paramref name="version"/>, or <paramref name="expense"/> is null. </exception>
        public Response<ApiResultInt64> UpdateExpense(string period, long expenseId, string version, UpdateExpenseApiModel expense, bool? bypassInvoiceDuplicateValidation = null, Enum86? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (expense == null)
            {
                throw new ArgumentNullException(nameof(expense));
            }

            using var message = CreateUpdateExpenseRequest(period, expenseId, version, expense, bypassInvoiceDuplicateValidation, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultInt64 value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultInt64.DeserializeApiResultInt64(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateAttachRequest(long expenseId, string version, string period, Enum87? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/expenses/", false);
            uri.AppendPath(expenseId, true);
            uri.AppendPath("/attach", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            return message;
        }

        /// <summary> Attaches a file or files to the given expense. </summary>
        /// <param name="expenseId"> The identifier of the expense to attach files to. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public async Task<Response<ApiListResultFileApiModel>> AttachAsync(long expenseId, string version, string period, Enum87? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreateAttachRequest(expenseId, version, period, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultFileApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiListResultFileApiModel.DeserializeApiListResultFileApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Attaches a file or files to the given expense. </summary>
        /// <param name="expenseId"> The identifier of the expense to attach files to. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public Response<ApiListResultFileApiModel> Attach(long expenseId, string version, string period, Enum87? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreateAttachRequest(expenseId, version, period, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultFileApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiListResultFileApiModel.DeserializeApiListResultFileApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateAttachmentsRequest(long expenseId, string version, string period, int? startIndex, int? numRows, string sort, Enum88? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/expenses/", false);
            uri.AppendPath(expenseId, true);
            uri.AppendPath("/attachments", false);
            if (startIndex != null)
            {
                uri.AppendQuery("startIndex", startIndex.Value, true);
            }
            if (numRows != null)
            {
                uri.AppendQuery("numRows", numRows.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            return message;
        }

        /// <summary> Returns the list of attachments of this expense. </summary>
        /// <param name="expenseId"> The identifier of the entity to attach files to. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="startIndex"> The Integer to use. </param>
        /// <param name="numRows"> The Integer to use. </param>
        /// <param name="sort"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public async Task<Response<ApiListResultFileApiModel>> AttachmentsAsync(long expenseId, string version, string period, int? startIndex = null, int? numRows = null, string sort = null, Enum88? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreateAttachmentsRequest(expenseId, version, period, startIndex, numRows, sort, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultFileApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiListResultFileApiModel.DeserializeApiListResultFileApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns the list of attachments of this expense. </summary>
        /// <param name="expenseId"> The identifier of the entity to attach files to. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="startIndex"> The Integer to use. </param>
        /// <param name="numRows"> The Integer to use. </param>
        /// <param name="sort"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public Response<ApiListResultFileApiModel> Attachments(long expenseId, string version, string period, int? startIndex = null, int? numRows = null, string sort = null, Enum88? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreateAttachmentsRequest(expenseId, version, period, startIndex, numRows, sort, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultFileApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiListResultFileApiModel.DeserializeApiListResultFileApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteCertifiedAttachmentsRequest(long expenseId, string version, string period, Enum89? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/expenses/", false);
            uri.AppendPath(expenseId, true);
            uri.AppendPath("/certifiedAttachments", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Deletes the certified attachments for the expense passed as parameter. </summary>
        /// <param name="expenseId"> The identifier of the expense. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public async Task<Response<ApiResultBoolean>> DeleteCertifiedAttachmentsAsync(long expenseId, string version, string period, Enum89? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreateDeleteCertifiedAttachmentsRequest(expenseId, version, period, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultBoolean value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultBoolean.DeserializeApiResultBoolean(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deletes the certified attachments for the expense passed as parameter. </summary>
        /// <param name="expenseId"> The identifier of the expense. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public Response<ApiResultBoolean> DeleteCertifiedAttachments(long expenseId, string version, string period, Enum89? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreateDeleteCertifiedAttachmentsRequest(expenseId, version, period, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultBoolean value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultBoolean.DeserializeApiResultBoolean(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCertifiedAttachmentsRequest(long expenseId, string version, string period, Enum90? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/expenses/", false);
            uri.AppendPath(expenseId, true);
            uri.AppendPath("/certifiedAttachments", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            return message;
        }

        /// <summary> Returns the list of certified attachments of this expense. </summary>
        /// <param name="expenseId"> The identifier of the expense. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public async Task<Response<ApiListResultFileApiModel>> CertifiedAttachmentsAsync(long expenseId, string version, string period, Enum90? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreateCertifiedAttachmentsRequest(expenseId, version, period, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultFileApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiListResultFileApiModel.DeserializeApiListResultFileApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns the list of certified attachments of this expense. </summary>
        /// <param name="expenseId"> The identifier of the expense. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public Response<ApiListResultFileApiModel> CertifiedAttachments(long expenseId, string version, string period, Enum90? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreateCertifiedAttachmentsRequest(expenseId, version, period, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultFileApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiListResultFileApiModel.DeserializeApiListResultFileApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDetachCertificationRequest(long expenseId, string version, string period, Enum91? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/expenses/", false);
            uri.AppendPath(expenseId, true);
            uri.AppendPath("/certify", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary>
        /// Detaches the existing document certification.
        /// 
        /// If the expense does not have any document certification attached this method does nothing.
        /// </summary>
        /// <param name="expenseId"> The identifier of the expense to remove the attachment from. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public async Task<Response<ApiResultBoolean>> DetachCertificationAsync(long expenseId, string version, string period, Enum91? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreateDetachCertificationRequest(expenseId, version, period, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultBoolean value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultBoolean.DeserializeApiResultBoolean(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Detaches the existing document certification.
        /// 
        /// If the expense does not have any document certification attached this method does nothing.
        /// </summary>
        /// <param name="expenseId"> The identifier of the expense to remove the attachment from. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public Response<ApiResultBoolean> DetachCertification(long expenseId, string version, string period, Enum91? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreateDetachCertificationRequest(expenseId, version, period, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultBoolean value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultBoolean.DeserializeApiResultBoolean(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCertifyRequest(long expenseId, string version, string period, Enum92? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/expenses/", false);
            uri.AppendPath(expenseId, true);
            uri.AppendPath("/certify", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            return message;
        }

        /// <summary> Attaches a certified file to the given expense. </summary>
        /// <param name="expenseId"> The identifier of the expense to attach the file to. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public async Task<Response<ApiListResultFileApiModel>> CertifyAsync(long expenseId, string version, string period, Enum92? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreateCertifyRequest(expenseId, version, period, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultFileApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiListResultFileApiModel.DeserializeApiListResultFileApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Attaches a certified file to the given expense. </summary>
        /// <param name="expenseId"> The identifier of the expense to attach the file to. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public Response<ApiListResultFileApiModel> Certify(long expenseId, string version, string period, Enum92? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreateCertifyRequest(expenseId, version, period, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultFileApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiListResultFileApiModel.DeserializeApiListResultFileApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
