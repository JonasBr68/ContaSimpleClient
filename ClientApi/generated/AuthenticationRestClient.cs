// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using ContasimpleAPI.Models;

namespace ContasimpleAPI
{
    internal partial class AuthenticationRestClient
    {
        private Uri endpoint;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of AuthenticationRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        public AuthenticationRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            endpoint ??= new Uri("https://api.contasimple.com");

            this.endpoint = endpoint;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreatePostRequest(string version, PostContentSchemaGrantType grantType, Enum422? acceptLanguage, string clientId, string clientSecret, string scope, string refreshToken, string username, string password, string token, int? company, int? user, string key)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/oauth/token", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json");
            request.Headers.Add("Content-Type", "application/x-www-form-urlencoded");
            var content = new FormUrlEncodedContent();
            content.Add("grant_type", grantType.ToString());
            if (clientId != null)
            {
                content.Add("client_id", clientId);
            }
            if (clientSecret != null)
            {
                content.Add("client_secret", clientSecret);
            }
            if (scope != null)
            {
                content.Add("scope", scope);
            }
            if (refreshToken != null)
            {
                content.Add("refresh_token", refreshToken);
            }
            if (username != null)
            {
                content.Add("username", username);
            }
            if (password != null)
            {
                content.Add("password", password);
            }
            if (token != null)
            {
                content.Add("token", token);
            }
            if (company != null)
            {
                content.Add("company", company.Value.ToString());
            }
            if (user != null)
            {
                content.Add("user", user.Value.ToString());
            }
            if (key != null)
            {
                content.Add("key", key);
            }
            request.Content = content;
            return message;
        }

        /// <summary> Provides authentication services for the API. &lt;br /&gt;&lt;br /&gt;The supported grant types are:&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;signup&lt;/strong&gt;:&amp;nbsp;Used for creating new users (this type requires to provide the &apos;&lt;strong&gt;username&lt;/strong&gt;&apos; and &apos;&lt;strong&gt;password&lt;/strong&gt;&apos; arguments). To accept an invitation to a company from the user creation, the &apos;&lt;strong&gt;invitation_id&lt;/strong&gt;&apos; and &apos;&lt;strong&gt;invitation_token&lt;/strong&gt;&apos; arguments are required).&lt;br /&gt;&lt;strong&gt;password&lt;/strong&gt;:&amp;nbsp;Used for authentication (this type requires to provide the &apos;&lt;strong&gt;username&lt;/strong&gt;&apos; and &apos;&lt;strong&gt;password&lt;/strong&gt;&apos; arguments).&lt;br /&gt;&lt;strong&gt;facebook&lt;/strong&gt;:&amp;nbsp;Used for authentication with a Facebook token (this type requires to provide the &apos;&lt;strong&gt;token&lt;/strong&gt;&apos; argument).&lt;br /&gt;&lt;strong&gt;google&lt;/strong&gt;:&amp;nbsp;Used for authentication with a Google token (this type requires to provide the &apos;&lt;strong&gt;token&lt;/strong&gt;&apos; argument).&lt;br /&gt;&lt;strong&gt;apple&lt;/strong&gt;:&amp;nbsp;Used for authentication with a Apple JWT (this type requires to provide the &apos;&lt;strong&gt;token&lt;/strong&gt;&apos; argument).&lt;br /&gt;&lt;strong&gt;refresh_token&lt;/strong&gt;:&amp;nbsp;Used for getting a new access token (this type requires to provide the &apos;&lt;strong&gt;refresh_token&lt;/strong&gt;&apos; argument).&lt;br /&gt;&lt;strong&gt;impersonate&lt;/strong&gt;:&amp;nbsp;Used for changing the current user (this type requires to provide the &apos;&lt;strong&gt;user&lt;/strong&gt;&apos; and &apos;&lt;strong&gt;refresh_token&lt;/strong&gt;&apos; arguments).&lt;br /&gt;&lt;strong&gt;change_company&lt;/strong&gt;:&amp;nbsp;Used for changing the current company (this type requires to provide the &apos;&lt;strong&gt;company&lt;/strong&gt;&apos; and &apos;&lt;strong&gt;refresh_token&lt;/strong&gt;&apos; arguments).&lt;br /&gt;&lt;strong&gt;authentication_key&lt;/strong&gt;:&amp;nbsp;Used for accessing a user account without providing username and password (this type requires to provide the &apos;&lt;strong&gt;key&lt;/strong&gt;&apos; argument). This grant type appends on the API response a client_id and client_secret.&lt;br /&gt;&lt;strong&gt;autologin_token&lt;/strong&gt;:&amp;nbsp;Used for accessing a user account without providing username and password (this type requires to provide the &apos;&lt;strong&gt;token&lt;/strong&gt;&apos; argument).&lt;br /&gt;. </summary>
        /// <param name="version"> The API version. </param>
        /// <param name="grantType"> The type of execution to process. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="clientId"> The identifier of the client requesting the service. </param>
        /// <param name="clientSecret"> The secret of the client requesting the service. </param>
        /// <param name="scope"> A comma separated list of requested scopes. </param>
        /// <param name="refreshToken"> The refresh token to get new access token. </param>
        /// <param name="username"> The username to register or authenticate on the service. </param>
        /// <param name="password"> The password to register or authenticate on the service. </param>
        /// <param name="token"> The 3rd party service access token. </param>
        /// <param name="company"> The identifier of the company to change to. </param>
        /// <param name="user"> The identifier of the new user to impersonate. </param>
        /// <param name="key"> The user authentication key. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public async Task<Response<AuthenticationResponse>> PostAsync(string version, PostContentSchemaGrantType grantType, Enum422? acceptLanguage = null, string clientId = null, string clientSecret = null, string scope = null, string refreshToken = null, string username = null, string password = null, string token = null, int? company = null, int? user = null, string key = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreatePostRequest(version, grantType, acceptLanguage, clientId, clientSecret, scope, refreshToken, username, password, token, company, user, key);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AuthenticationResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = AuthenticationResponse.DeserializeAuthenticationResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Provides authentication services for the API. &lt;br /&gt;&lt;br /&gt;The supported grant types are:&lt;br /&gt;&lt;br /&gt;&lt;strong&gt;signup&lt;/strong&gt;:&amp;nbsp;Used for creating new users (this type requires to provide the &apos;&lt;strong&gt;username&lt;/strong&gt;&apos; and &apos;&lt;strong&gt;password&lt;/strong&gt;&apos; arguments). To accept an invitation to a company from the user creation, the &apos;&lt;strong&gt;invitation_id&lt;/strong&gt;&apos; and &apos;&lt;strong&gt;invitation_token&lt;/strong&gt;&apos; arguments are required).&lt;br /&gt;&lt;strong&gt;password&lt;/strong&gt;:&amp;nbsp;Used for authentication (this type requires to provide the &apos;&lt;strong&gt;username&lt;/strong&gt;&apos; and &apos;&lt;strong&gt;password&lt;/strong&gt;&apos; arguments).&lt;br /&gt;&lt;strong&gt;facebook&lt;/strong&gt;:&amp;nbsp;Used for authentication with a Facebook token (this type requires to provide the &apos;&lt;strong&gt;token&lt;/strong&gt;&apos; argument).&lt;br /&gt;&lt;strong&gt;google&lt;/strong&gt;:&amp;nbsp;Used for authentication with a Google token (this type requires to provide the &apos;&lt;strong&gt;token&lt;/strong&gt;&apos; argument).&lt;br /&gt;&lt;strong&gt;apple&lt;/strong&gt;:&amp;nbsp;Used for authentication with a Apple JWT (this type requires to provide the &apos;&lt;strong&gt;token&lt;/strong&gt;&apos; argument).&lt;br /&gt;&lt;strong&gt;refresh_token&lt;/strong&gt;:&amp;nbsp;Used for getting a new access token (this type requires to provide the &apos;&lt;strong&gt;refresh_token&lt;/strong&gt;&apos; argument).&lt;br /&gt;&lt;strong&gt;impersonate&lt;/strong&gt;:&amp;nbsp;Used for changing the current user (this type requires to provide the &apos;&lt;strong&gt;user&lt;/strong&gt;&apos; and &apos;&lt;strong&gt;refresh_token&lt;/strong&gt;&apos; arguments).&lt;br /&gt;&lt;strong&gt;change_company&lt;/strong&gt;:&amp;nbsp;Used for changing the current company (this type requires to provide the &apos;&lt;strong&gt;company&lt;/strong&gt;&apos; and &apos;&lt;strong&gt;refresh_token&lt;/strong&gt;&apos; arguments).&lt;br /&gt;&lt;strong&gt;authentication_key&lt;/strong&gt;:&amp;nbsp;Used for accessing a user account without providing username and password (this type requires to provide the &apos;&lt;strong&gt;key&lt;/strong&gt;&apos; argument). This grant type appends on the API response a client_id and client_secret.&lt;br /&gt;&lt;strong&gt;autologin_token&lt;/strong&gt;:&amp;nbsp;Used for accessing a user account without providing username and password (this type requires to provide the &apos;&lt;strong&gt;token&lt;/strong&gt;&apos; argument).&lt;br /&gt;. </summary>
        /// <param name="version"> The API version. </param>
        /// <param name="grantType"> The type of execution to process. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="clientId"> The identifier of the client requesting the service. </param>
        /// <param name="clientSecret"> The secret of the client requesting the service. </param>
        /// <param name="scope"> A comma separated list of requested scopes. </param>
        /// <param name="refreshToken"> The refresh token to get new access token. </param>
        /// <param name="username"> The username to register or authenticate on the service. </param>
        /// <param name="password"> The password to register or authenticate on the service. </param>
        /// <param name="token"> The 3rd party service access token. </param>
        /// <param name="company"> The identifier of the company to change to. </param>
        /// <param name="user"> The identifier of the new user to impersonate. </param>
        /// <param name="key"> The user authentication key. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public Response<AuthenticationResponse> Post(string version, PostContentSchemaGrantType grantType, Enum422? acceptLanguage = null, string clientId = null, string clientSecret = null, string scope = null, string refreshToken = null, string username = null, string password = null, string token = null, int? company = null, int? user = null, string key = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreatePostRequest(version, grantType, acceptLanguage, clientId, clientSecret, scope, refreshToken, username, password, token, company, user, key);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AuthenticationResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = AuthenticationResponse.DeserializeAuthenticationResponse(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
