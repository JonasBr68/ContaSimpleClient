// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using ContasimpleAPI.Models;

namespace ContasimpleAPI
{
    internal partial class AccountingEstimatesRelatedDocumentsRestClient
    {
        private Uri endpoint;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of AccountingEstimatesRelatedDocumentsRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        public AccountingEstimatesRelatedDocumentsRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            endpoint ??= new Uri("https://api.contasimple.com");

            this.endpoint = endpoint;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateDeleteRelatedDeliveryNotesRequest(long estimateId, string version, Enum58? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/estimates/", false);
            uri.AppendPath(estimateId, true);
            uri.AppendPath("/relatedDeliveryNotes", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Removes the estimate related delivery notes. </summary>
        /// <param name="estimateId"> The identifier of the estimate to delete the related delivery notes. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public async Task<Response<ApiResultBoolean>> DeleteRelatedDeliveryNotesAsync(long estimateId, string version, Enum58? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateDeleteRelatedDeliveryNotesRequest(estimateId, version, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultBoolean value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultBoolean.DeserializeApiResultBoolean(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Removes the estimate related delivery notes. </summary>
        /// <param name="estimateId"> The identifier of the estimate to delete the related delivery notes. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public Response<ApiResultBoolean> DeleteRelatedDeliveryNotes(long estimateId, string version, Enum58? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateDeleteRelatedDeliveryNotesRequest(estimateId, version, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultBoolean value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultBoolean.DeserializeApiResultBoolean(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRelatedDeliveryNotesRequest(long estimateId, string version, Enum59? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/estimates/", false);
            uri.AppendPath(estimateId, true);
            uri.AppendPath("/relatedDeliveryNotes", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            return message;
        }

        /// <summary> Gets the delivery notes related to the requested estimate id. </summary>
        /// <param name="estimateId"> The identifier of the estimate to retrieve the related delivery notes. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public async Task<Response<ApiListResultDeliveryNoteApiModel>> GetRelatedDeliveryNotesAsync(long estimateId, string version, Enum59? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateGetRelatedDeliveryNotesRequest(estimateId, version, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultDeliveryNoteApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiListResultDeliveryNoteApiModel.DeserializeApiListResultDeliveryNoteApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the delivery notes related to the requested estimate id. </summary>
        /// <param name="estimateId"> The identifier of the estimate to retrieve the related delivery notes. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public Response<ApiListResultDeliveryNoteApiModel> GetRelatedDeliveryNotes(long estimateId, string version, Enum59? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateGetRelatedDeliveryNotesRequest(estimateId, version, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultDeliveryNoteApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiListResultDeliveryNoteApiModel.DeserializeApiListResultDeliveryNoteApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateRelatedDeliveryNotesRequest(long estimateId, string version, string deliveryNotes, Enum60? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/estimates/", false);
            uri.AppendPath(estimateId, true);
            uri.AppendPath("/relatedDeliveryNotes", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            request.Headers.Add("Content-Type", "text/html");
            request.Content = new StringRequestContent(deliveryNotes);
            return message;
        }

        /// <summary>
        /// Assigns the list of delivery notes to the given estimate.
        /// 
        /// Does not remove current assigned delivery notes.
        /// </summary>
        /// <param name="estimateId"> The identifier of the estimate to assign the related delivery notes. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="deliveryNotes"> The list of delivery note identifiers. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="deliveryNotes"/> is null. </exception>
        public async Task<Response<ApiListResultDeliveryNoteApiModel>> UpdateRelatedDeliveryNotesAsync(long estimateId, string version, string deliveryNotes, Enum60? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (deliveryNotes == null)
            {
                throw new ArgumentNullException(nameof(deliveryNotes));
            }

            using var message = CreateUpdateRelatedDeliveryNotesRequest(estimateId, version, deliveryNotes, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultDeliveryNoteApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiListResultDeliveryNoteApiModel.DeserializeApiListResultDeliveryNoteApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Assigns the list of delivery notes to the given estimate.
        /// 
        /// Does not remove current assigned delivery notes.
        /// </summary>
        /// <param name="estimateId"> The identifier of the estimate to assign the related delivery notes. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="deliveryNotes"> The list of delivery note identifiers. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="deliveryNotes"/> is null. </exception>
        public Response<ApiListResultDeliveryNoteApiModel> UpdateRelatedDeliveryNotes(long estimateId, string version, string deliveryNotes, Enum60? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (deliveryNotes == null)
            {
                throw new ArgumentNullException(nameof(deliveryNotes));
            }

            using var message = CreateUpdateRelatedDeliveryNotesRequest(estimateId, version, deliveryNotes, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultDeliveryNoteApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiListResultDeliveryNoteApiModel.DeserializeApiListResultDeliveryNoteApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateRelatedDeliveryNotesRequest(long estimateId, string version, DeliveryNoteIdentifiersListApiModel deliveryNotes, Enum60? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/estimates/", false);
            uri.AppendPath(estimateId, true);
            uri.AppendPath("/relatedDeliveryNotes", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(deliveryNotes);
            request.Content = content;
            return message;
        }

        /// <summary>
        /// Assigns the list of delivery notes to the given estimate.
        /// 
        /// Does not remove current assigned delivery notes.
        /// </summary>
        /// <param name="estimateId"> The identifier of the estimate to assign the related delivery notes. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="deliveryNotes"> The list of delivery note identifiers. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="deliveryNotes"/> is null. </exception>
        public async Task<Response<ApiListResultDeliveryNoteApiModel>> UpdateRelatedDeliveryNotesAsync(long estimateId, string version, DeliveryNoteIdentifiersListApiModel deliveryNotes, Enum60? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (deliveryNotes == null)
            {
                throw new ArgumentNullException(nameof(deliveryNotes));
            }

            using var message = CreateUpdateRelatedDeliveryNotesRequest(estimateId, version, deliveryNotes, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultDeliveryNoteApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiListResultDeliveryNoteApiModel.DeserializeApiListResultDeliveryNoteApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Assigns the list of delivery notes to the given estimate.
        /// 
        /// Does not remove current assigned delivery notes.
        /// </summary>
        /// <param name="estimateId"> The identifier of the estimate to assign the related delivery notes. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="deliveryNotes"> The list of delivery note identifiers. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="deliveryNotes"/> is null. </exception>
        public Response<ApiListResultDeliveryNoteApiModel> UpdateRelatedDeliveryNotes(long estimateId, string version, DeliveryNoteIdentifiersListApiModel deliveryNotes, Enum60? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (deliveryNotes == null)
            {
                throw new ArgumentNullException(nameof(deliveryNotes));
            }

            using var message = CreateUpdateRelatedDeliveryNotesRequest(estimateId, version, deliveryNotes, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultDeliveryNoteApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiListResultDeliveryNoteApiModel.DeserializeApiListResultDeliveryNoteApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRelatedDeliveryNoteRequest(long estimateId, long deliveryNoteId, string version, Enum61? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/estimates/", false);
            uri.AppendPath(estimateId, true);
            uri.AppendPath("/relatedDeliveryNotes/", false);
            uri.AppendPath(deliveryNoteId, true);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Removes the relation between the given estimate and delivery note. </summary>
        /// <param name="estimateId"> The identifier of the estimate to delete the related delivery note. </param>
        /// <param name="deliveryNoteId"> The identifier of the delivery note to remove. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public async Task<Response<ApiResultBoolean>> DeleteRelatedDeliveryNoteAsync(long estimateId, long deliveryNoteId, string version, Enum61? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateDeleteRelatedDeliveryNoteRequest(estimateId, deliveryNoteId, version, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultBoolean value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultBoolean.DeserializeApiResultBoolean(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Removes the relation between the given estimate and delivery note. </summary>
        /// <param name="estimateId"> The identifier of the estimate to delete the related delivery note. </param>
        /// <param name="deliveryNoteId"> The identifier of the delivery note to remove. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public Response<ApiResultBoolean> DeleteRelatedDeliveryNote(long estimateId, long deliveryNoteId, string version, Enum61? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateDeleteRelatedDeliveryNoteRequest(estimateId, deliveryNoteId, version, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultBoolean value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultBoolean.DeserializeApiResultBoolean(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRelatedInvoicesRequest(long estimateId, string version, Enum62? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/estimates/", false);
            uri.AppendPath(estimateId, true);
            uri.AppendPath("/relatedInvoices", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Removes the estimate related invoices. </summary>
        /// <param name="estimateId"> The identifier of the estimate to delete the related invoices. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public async Task<Response<ApiResultBoolean>> DeleteRelatedInvoicesAsync(long estimateId, string version, Enum62? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateDeleteRelatedInvoicesRequest(estimateId, version, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultBoolean value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultBoolean.DeserializeApiResultBoolean(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Removes the estimate related invoices. </summary>
        /// <param name="estimateId"> The identifier of the estimate to delete the related invoices. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public Response<ApiResultBoolean> DeleteRelatedInvoices(long estimateId, string version, Enum62? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateDeleteRelatedInvoicesRequest(estimateId, version, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultBoolean value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultBoolean.DeserializeApiResultBoolean(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRelatedInvoicesRequest(long estimateId, string version, Enum63? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/estimates/", false);
            uri.AppendPath(estimateId, true);
            uri.AppendPath("/relatedInvoices", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            return message;
        }

        /// <summary> Gets the invoices related to the requested estimate id. </summary>
        /// <param name="estimateId"> The identifier of the estimate to retrieve the related invoices. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public async Task<Response<ApiListResultInvoiceApiModel>> GetRelatedInvoicesAsync(long estimateId, string version, Enum63? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateGetRelatedInvoicesRequest(estimateId, version, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultInvoiceApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiListResultInvoiceApiModel.DeserializeApiListResultInvoiceApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the invoices related to the requested estimate id. </summary>
        /// <param name="estimateId"> The identifier of the estimate to retrieve the related invoices. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public Response<ApiListResultInvoiceApiModel> GetRelatedInvoices(long estimateId, string version, Enum63? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateGetRelatedInvoicesRequest(estimateId, version, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultInvoiceApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiListResultInvoiceApiModel.DeserializeApiListResultInvoiceApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateRelatedInvoicesRequest(long estimateId, string version, string invoices, Enum64? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/estimates/", false);
            uri.AppendPath(estimateId, true);
            uri.AppendPath("/relatedInvoices", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            request.Headers.Add("Content-Type", "text/html");
            request.Content = new StringRequestContent(invoices);
            return message;
        }

        /// <summary>
        /// Assigns the list of invoices to the given estimate.
        /// 
        /// Does not remove current assigned invoices.
        /// </summary>
        /// <param name="estimateId"> The identifier of the estimate to assign the invoices. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="invoices"> The list of invoice identifiers. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="invoices"/> is null. </exception>
        public async Task<Response<ApiListResultInvoiceApiModel>> UpdateRelatedInvoicesAsync(long estimateId, string version, string invoices, Enum64? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (invoices == null)
            {
                throw new ArgumentNullException(nameof(invoices));
            }

            using var message = CreateUpdateRelatedInvoicesRequest(estimateId, version, invoices, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultInvoiceApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiListResultInvoiceApiModel.DeserializeApiListResultInvoiceApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Assigns the list of invoices to the given estimate.
        /// 
        /// Does not remove current assigned invoices.
        /// </summary>
        /// <param name="estimateId"> The identifier of the estimate to assign the invoices. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="invoices"> The list of invoice identifiers. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="invoices"/> is null. </exception>
        public Response<ApiListResultInvoiceApiModel> UpdateRelatedInvoices(long estimateId, string version, string invoices, Enum64? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (invoices == null)
            {
                throw new ArgumentNullException(nameof(invoices));
            }

            using var message = CreateUpdateRelatedInvoicesRequest(estimateId, version, invoices, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultInvoiceApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiListResultInvoiceApiModel.DeserializeApiListResultInvoiceApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateRelatedInvoicesRequest(long estimateId, string version, InvoiceIdentifiersListApiModel invoices, Enum64? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/estimates/", false);
            uri.AppendPath(estimateId, true);
            uri.AppendPath("/relatedInvoices", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(invoices);
            request.Content = content;
            return message;
        }

        /// <summary>
        /// Assigns the list of invoices to the given estimate.
        /// 
        /// Does not remove current assigned invoices.
        /// </summary>
        /// <param name="estimateId"> The identifier of the estimate to assign the invoices. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="invoices"> The list of invoice identifiers. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="invoices"/> is null. </exception>
        public async Task<Response<ApiListResultInvoiceApiModel>> UpdateRelatedInvoicesAsync(long estimateId, string version, InvoiceIdentifiersListApiModel invoices, Enum64? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (invoices == null)
            {
                throw new ArgumentNullException(nameof(invoices));
            }

            using var message = CreateUpdateRelatedInvoicesRequest(estimateId, version, invoices, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultInvoiceApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiListResultInvoiceApiModel.DeserializeApiListResultInvoiceApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Assigns the list of invoices to the given estimate.
        /// 
        /// Does not remove current assigned invoices.
        /// </summary>
        /// <param name="estimateId"> The identifier of the estimate to assign the invoices. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="invoices"> The list of invoice identifiers. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="invoices"/> is null. </exception>
        public Response<ApiListResultInvoiceApiModel> UpdateRelatedInvoices(long estimateId, string version, InvoiceIdentifiersListApiModel invoices, Enum64? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (invoices == null)
            {
                throw new ArgumentNullException(nameof(invoices));
            }

            using var message = CreateUpdateRelatedInvoicesRequest(estimateId, version, invoices, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultInvoiceApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiListResultInvoiceApiModel.DeserializeApiListResultInvoiceApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRelatedInvoicesIdRequest(long estimateId, long invoiceId, string version, Enum65? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/estimates/", false);
            uri.AppendPath(estimateId, true);
            uri.AppendPath("/relatedInvoices/", false);
            uri.AppendPath(invoiceId, true);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Removes the relation between the given estimate and invoice. </summary>
        /// <param name="estimateId"> The identifier of the estimate to delete the related invoice. </param>
        /// <param name="invoiceId"> The identifier of the invoice to remove. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public async Task<Response<ApiResultBoolean>> DeleteRelatedInvoicesIdAsync(long estimateId, long invoiceId, string version, Enum65? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateDeleteRelatedInvoicesIdRequest(estimateId, invoiceId, version, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultBoolean value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultBoolean.DeserializeApiResultBoolean(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Removes the relation between the given estimate and invoice. </summary>
        /// <param name="estimateId"> The identifier of the estimate to delete the related invoice. </param>
        /// <param name="invoiceId"> The identifier of the invoice to remove. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public Response<ApiResultBoolean> DeleteRelatedInvoicesId(long estimateId, long invoiceId, string version, Enum65? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateDeleteRelatedInvoicesIdRequest(estimateId, invoiceId, version, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultBoolean value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultBoolean.DeserializeApiResultBoolean(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
