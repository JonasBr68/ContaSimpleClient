// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using ContasimpleAPI.Models;

namespace ContasimpleAPI
{
    internal partial class ImportDataRestClient
    {
        private Uri endpoint;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of ImportDataRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        public ImportDataRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            endpoint ??= new Uri("https://api.contasimple.com");

            this.endpoint = endpoint;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateImportFileDataRequest(string version, string importFileConfiguration, Enum328? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/import/importData", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", "text/html");
            request.Content = new StringRequestContent(importFileConfiguration);
            return message;
        }

        /// <summary> Imports data from an uploaded file asynchronously. </summary>
        /// <param name="version"> The String to use. </param>
        /// <param name="importFileConfiguration"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="importFileConfiguration"/> is null. </exception>
        public async Task<Response<ApiResultImportFileTaskApiModel>> ImportFileDataAsync(string version, string importFileConfiguration, Enum328? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (importFileConfiguration == null)
            {
                throw new ArgumentNullException(nameof(importFileConfiguration));
            }

            using var message = CreateImportFileDataRequest(version, importFileConfiguration, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultImportFileTaskApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultImportFileTaskApiModel.DeserializeApiResultImportFileTaskApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Imports data from an uploaded file asynchronously. </summary>
        /// <param name="version"> The String to use. </param>
        /// <param name="importFileConfiguration"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="importFileConfiguration"/> is null. </exception>
        public Response<ApiResultImportFileTaskApiModel> ImportFileData(string version, string importFileConfiguration, Enum328? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (importFileConfiguration == null)
            {
                throw new ArgumentNullException(nameof(importFileConfiguration));
            }

            using var message = CreateImportFileDataRequest(version, importFileConfiguration, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultImportFileTaskApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultImportFileTaskApiModel.DeserializeApiResultImportFileTaskApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateImportFileDataRequest(string version, ImportFileRequestApiModel importFileConfiguration, Enum328? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/import/importData", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(importFileConfiguration);
            request.Content = content;
            return message;
        }

        /// <summary> Imports data from an uploaded file asynchronously. </summary>
        /// <param name="version"> The String to use. </param>
        /// <param name="importFileConfiguration"> The ImportFileRequestApiModel to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="importFileConfiguration"/> is null. </exception>
        public async Task<Response<ApiResultImportFileTaskApiModel>> ImportFileDataAsync(string version, ImportFileRequestApiModel importFileConfiguration, Enum328? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (importFileConfiguration == null)
            {
                throw new ArgumentNullException(nameof(importFileConfiguration));
            }

            using var message = CreateImportFileDataRequest(version, importFileConfiguration, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultImportFileTaskApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultImportFileTaskApiModel.DeserializeApiResultImportFileTaskApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Imports data from an uploaded file asynchronously. </summary>
        /// <param name="version"> The String to use. </param>
        /// <param name="importFileConfiguration"> The ImportFileRequestApiModel to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="importFileConfiguration"/> is null. </exception>
        public Response<ApiResultImportFileTaskApiModel> ImportFileData(string version, ImportFileRequestApiModel importFileConfiguration, Enum328? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (importFileConfiguration == null)
            {
                throw new ArgumentNullException(nameof(importFileConfiguration));
            }

            using var message = CreateImportFileDataRequest(version, importFileConfiguration, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultImportFileTaskApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultImportFileTaskApiModel.DeserializeApiResultImportFileTaskApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRequest(Enum331 importType, string filename, string version, Enum332? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/import/preview", false);
            uri.AppendQuery("importType", importType.ToString(), true);
            uri.AppendQuery("filename", filename, true);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Returns the preview data of the file that will be imported. </summary>
        /// <param name="importType"> The Enum331 to use. </param>
        /// <param name="filename"> The String to use. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="filename"/> or <paramref name="version"/> is null. </exception>
        public async Task<Response<ApiResultImportedPreviewDataApiModel>> GetAsync(Enum331 importType, string filename, string version, Enum332? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (filename == null)
            {
                throw new ArgumentNullException(nameof(filename));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateGetRequest(importType, filename, version, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultImportedPreviewDataApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultImportedPreviewDataApiModel.DeserializeApiResultImportedPreviewDataApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns the preview data of the file that will be imported. </summary>
        /// <param name="importType"> The Enum331 to use. </param>
        /// <param name="filename"> The String to use. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="filename"/> or <paramref name="version"/> is null. </exception>
        public Response<ApiResultImportedPreviewDataApiModel> Get(Enum331 importType, string filename, string version, Enum332? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (filename == null)
            {
                throw new ArgumentNullException(nameof(filename));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateGetRequest(importType, filename, version, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultImportedPreviewDataApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultImportedPreviewDataApiModel.DeserializeApiResultImportedPreviewDataApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
