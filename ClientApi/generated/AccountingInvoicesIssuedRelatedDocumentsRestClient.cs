// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using ContasimpleAPI.Models;

namespace ContasimpleAPI
{
    internal partial class AccountingInvoicesIssuedRelatedDocumentsRestClient
    {
        private Uri endpoint;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of AccountingInvoicesIssuedRelatedDocumentsRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        public AccountingInvoicesIssuedRelatedDocumentsRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            endpoint ??= new Uri("https://api.contasimple.com");

            this.endpoint = endpoint;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateDeleteRelatedDeliveryNotesRequest(long invoiceId, string version, string period, Enum123? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/invoices/issued/", false);
            uri.AppendPath(invoiceId, true);
            uri.AppendPath("/relatedDeliveryNotes", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Removes the invoice related delivery notes. </summary>
        /// <param name="invoiceId"> The identifier of the invoice to delete the related delivery notes. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public async Task<Response<ApiResultBoolean>> DeleteRelatedDeliveryNotesAsync(long invoiceId, string version, string period, Enum123? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreateDeleteRelatedDeliveryNotesRequest(invoiceId, version, period, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultBoolean value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultBoolean.DeserializeApiResultBoolean(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Removes the invoice related delivery notes. </summary>
        /// <param name="invoiceId"> The identifier of the invoice to delete the related delivery notes. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public Response<ApiResultBoolean> DeleteRelatedDeliveryNotes(long invoiceId, string version, string period, Enum123? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreateDeleteRelatedDeliveryNotesRequest(invoiceId, version, period, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultBoolean value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultBoolean.DeserializeApiResultBoolean(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRelatedDeliveryNotesRequest(long invoiceId, string version, string period, Enum124? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/invoices/issued/", false);
            uri.AppendPath(invoiceId, true);
            uri.AppendPath("/relatedDeliveryNotes", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            return message;
        }

        /// <summary> Gets the delivery notes related to the requested invoice id. </summary>
        /// <param name="invoiceId"> The identifier of the invoice to retrieve the related delivery notes. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public async Task<Response<ApiListResultDeliveryNoteApiModel>> GetRelatedDeliveryNotesAsync(long invoiceId, string version, string period, Enum124? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreateGetRelatedDeliveryNotesRequest(invoiceId, version, period, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultDeliveryNoteApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiListResultDeliveryNoteApiModel.DeserializeApiListResultDeliveryNoteApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the delivery notes related to the requested invoice id. </summary>
        /// <param name="invoiceId"> The identifier of the invoice to retrieve the related delivery notes. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public Response<ApiListResultDeliveryNoteApiModel> GetRelatedDeliveryNotes(long invoiceId, string version, string period, Enum124? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreateGetRelatedDeliveryNotesRequest(invoiceId, version, period, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultDeliveryNoteApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiListResultDeliveryNoteApiModel.DeserializeApiListResultDeliveryNoteApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateRelatedDeliveryNotesRequest(long invoiceId, string version, string period, string deliveryNotes, Enum125? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/invoices/issued/", false);
            uri.AppendPath(invoiceId, true);
            uri.AppendPath("/relatedDeliveryNotes", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            request.Headers.Add("Content-Type", "text/html");
            request.Content = new StringRequestContent(deliveryNotes);
            return message;
        }

        /// <summary>
        /// Assigns the list of delivery notes to the given invoice.
        /// 
        /// Does not remove current assigned delivery notes.
        /// </summary>
        /// <param name="invoiceId"> The identifier of the invoice to assign the related delivery notes. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="deliveryNotes"> The list of delivery note identifiers. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/>, <paramref name="period"/>, or <paramref name="deliveryNotes"/> is null. </exception>
        public async Task<Response<ApiListResultDeliveryNoteApiModel>> UpdateRelatedDeliveryNotesAsync(long invoiceId, string version, string period, string deliveryNotes, Enum125? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (deliveryNotes == null)
            {
                throw new ArgumentNullException(nameof(deliveryNotes));
            }

            using var message = CreateUpdateRelatedDeliveryNotesRequest(invoiceId, version, period, deliveryNotes, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultDeliveryNoteApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiListResultDeliveryNoteApiModel.DeserializeApiListResultDeliveryNoteApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Assigns the list of delivery notes to the given invoice.
        /// 
        /// Does not remove current assigned delivery notes.
        /// </summary>
        /// <param name="invoiceId"> The identifier of the invoice to assign the related delivery notes. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="deliveryNotes"> The list of delivery note identifiers. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/>, <paramref name="period"/>, or <paramref name="deliveryNotes"/> is null. </exception>
        public Response<ApiListResultDeliveryNoteApiModel> UpdateRelatedDeliveryNotes(long invoiceId, string version, string period, string deliveryNotes, Enum125? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (deliveryNotes == null)
            {
                throw new ArgumentNullException(nameof(deliveryNotes));
            }

            using var message = CreateUpdateRelatedDeliveryNotesRequest(invoiceId, version, period, deliveryNotes, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultDeliveryNoteApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiListResultDeliveryNoteApiModel.DeserializeApiListResultDeliveryNoteApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateRelatedDeliveryNotesRequest(long invoiceId, string version, string period, DeliveryNoteIdentifiersListApiModel deliveryNotes, Enum125? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/invoices/issued/", false);
            uri.AppendPath(invoiceId, true);
            uri.AppendPath("/relatedDeliveryNotes", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(deliveryNotes);
            request.Content = content;
            return message;
        }

        /// <summary>
        /// Assigns the list of delivery notes to the given invoice.
        /// 
        /// Does not remove current assigned delivery notes.
        /// </summary>
        /// <param name="invoiceId"> The identifier of the invoice to assign the related delivery notes. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="deliveryNotes"> The list of delivery note identifiers. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/>, <paramref name="period"/>, or <paramref name="deliveryNotes"/> is null. </exception>
        public async Task<Response<ApiListResultDeliveryNoteApiModel>> UpdateRelatedDeliveryNotesAsync(long invoiceId, string version, string period, DeliveryNoteIdentifiersListApiModel deliveryNotes, Enum125? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (deliveryNotes == null)
            {
                throw new ArgumentNullException(nameof(deliveryNotes));
            }

            using var message = CreateUpdateRelatedDeliveryNotesRequest(invoiceId, version, period, deliveryNotes, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultDeliveryNoteApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiListResultDeliveryNoteApiModel.DeserializeApiListResultDeliveryNoteApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Assigns the list of delivery notes to the given invoice.
        /// 
        /// Does not remove current assigned delivery notes.
        /// </summary>
        /// <param name="invoiceId"> The identifier of the invoice to assign the related delivery notes. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="deliveryNotes"> The list of delivery note identifiers. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/>, <paramref name="period"/>, or <paramref name="deliveryNotes"/> is null. </exception>
        public Response<ApiListResultDeliveryNoteApiModel> UpdateRelatedDeliveryNotes(long invoiceId, string version, string period, DeliveryNoteIdentifiersListApiModel deliveryNotes, Enum125? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (deliveryNotes == null)
            {
                throw new ArgumentNullException(nameof(deliveryNotes));
            }

            using var message = CreateUpdateRelatedDeliveryNotesRequest(invoiceId, version, period, deliveryNotes, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultDeliveryNoteApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiListResultDeliveryNoteApiModel.DeserializeApiListResultDeliveryNoteApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRelatedDeliveryNoteRequest(long invoiceId, long deliveryNoteId, string version, string period, Enum126? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/invoices/issued/", false);
            uri.AppendPath(invoiceId, true);
            uri.AppendPath("/relatedDeliveryNotes/", false);
            uri.AppendPath(deliveryNoteId, true);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Removes the relation between the given invoice and delivery note. </summary>
        /// <param name="invoiceId"> The identifier of the invoice to delete the related delivery note. </param>
        /// <param name="deliveryNoteId"> The identifier of the delivery note to remove. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public async Task<Response<ApiResultBoolean>> DeleteRelatedDeliveryNoteAsync(long invoiceId, long deliveryNoteId, string version, string period, Enum126? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreateDeleteRelatedDeliveryNoteRequest(invoiceId, deliveryNoteId, version, period, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultBoolean value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultBoolean.DeserializeApiResultBoolean(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Removes the relation between the given invoice and delivery note. </summary>
        /// <param name="invoiceId"> The identifier of the invoice to delete the related delivery note. </param>
        /// <param name="deliveryNoteId"> The identifier of the delivery note to remove. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public Response<ApiResultBoolean> DeleteRelatedDeliveryNote(long invoiceId, long deliveryNoteId, string version, string period, Enum126? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreateDeleteRelatedDeliveryNoteRequest(invoiceId, deliveryNoteId, version, period, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultBoolean value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultBoolean.DeserializeApiResultBoolean(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRelatedEstimateRequest(long invoiceId, string version, string period, Enum127? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/invoices/issued/", false);
            uri.AppendPath(invoiceId, true);
            uri.AppendPath("/relatedEstimate", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Removes the invoice related estimate. </summary>
        /// <param name="invoiceId"> The identifier of the invoice to delete the related estimate. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public async Task<Response<ApiResultBoolean>> DeleteRelatedEstimateAsync(long invoiceId, string version, string period, Enum127? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreateDeleteRelatedEstimateRequest(invoiceId, version, period, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultBoolean value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultBoolean.DeserializeApiResultBoolean(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Removes the invoice related estimate. </summary>
        /// <param name="invoiceId"> The identifier of the invoice to delete the related estimate. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public Response<ApiResultBoolean> DeleteRelatedEstimate(long invoiceId, string version, string period, Enum127? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreateDeleteRelatedEstimateRequest(invoiceId, version, period, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultBoolean value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultBoolean.DeserializeApiResultBoolean(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRelatedEstimateRequest(long invoiceId, string version, string period, Enum128? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/invoices/issued/", false);
            uri.AppendPath(invoiceId, true);
            uri.AppendPath("/relatedEstimate", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Gets the estimate related to the requested invoice id. </summary>
        /// <param name="invoiceId"> The identifier of the invoice to retrieve the related estimate. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public async Task<Response<ApiResultEstimateApiModel>> GetRelatedEstimateAsync(long invoiceId, string version, string period, Enum128? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreateGetRelatedEstimateRequest(invoiceId, version, period, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultEstimateApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultEstimateApiModel.DeserializeApiResultEstimateApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the estimate related to the requested invoice id. </summary>
        /// <param name="invoiceId"> The identifier of the invoice to retrieve the related estimate. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public Response<ApiResultEstimateApiModel> GetRelatedEstimate(long invoiceId, string version, string period, Enum128? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreateGetRelatedEstimateRequest(invoiceId, version, period, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultEstimateApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultEstimateApiModel.DeserializeApiResultEstimateApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateRelatedEstimateRequest(long invoiceId, long estimateId, string version, string period, Enum129? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/invoices/issued/", false);
            uri.AppendPath(invoiceId, true);
            uri.AppendPath("/relatedEstimate/", false);
            uri.AppendPath(estimateId, true);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Updates the invoice related estimate. </summary>
        /// <param name="invoiceId"> The identifier of the invoice to update the related estimate. </param>
        /// <param name="estimateId"> The identifier of the estimate to attach. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public async Task<Response<ApiResultEstimateApiModel>> UpdateRelatedEstimateAsync(long invoiceId, long estimateId, string version, string period, Enum129? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreateUpdateRelatedEstimateRequest(invoiceId, estimateId, version, period, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultEstimateApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultEstimateApiModel.DeserializeApiResultEstimateApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Updates the invoice related estimate. </summary>
        /// <param name="invoiceId"> The identifier of the invoice to update the related estimate. </param>
        /// <param name="estimateId"> The identifier of the estimate to attach. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public Response<ApiResultEstimateApiModel> UpdateRelatedEstimate(long invoiceId, long estimateId, string version, string period, Enum129? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreateUpdateRelatedEstimateRequest(invoiceId, estimateId, version, period, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultEstimateApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultEstimateApiModel.DeserializeApiResultEstimateApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
