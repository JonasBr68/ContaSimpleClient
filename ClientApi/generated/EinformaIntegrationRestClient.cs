// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using ContasimpleAPI.Models;

namespace ContasimpleAPI
{
    internal partial class EinformaIntegrationRestClient
    {
        private Uri endpoint;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of EinformaIntegrationRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        public EinformaIntegrationRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            endpoint ??= new Uri("https://api.contasimple.com");

            this.endpoint = endpoint;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateCompanyProfileRequest(string nif, string version, Enum333? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/integrations/entities/companyProfile", false);
            uri.AppendQuery("nif", nif, true);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Returns the company matching the requested NIF/UID. </summary>
        /// <param name="nif">
        /// A field that can be formatted either as a valid Spanish NIF (ex: A00000000) or a UID (ex: HyEyLl2sh0pk20ECa-og7Q).
        /// 
        ///             A UID-like string will come from the NIF field returned by the predictive search results.&quot;
        /// 
        ///             A valid NIF string will be used when the API method is invoked directly from the &apos;Add new client&apos; autocomplete feature of the NIF webform field.
        /// </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nif"/> or <paramref name="version"/> is null. </exception>
        public async Task<Response<ApiResultCompanyFullInfoApiModel>> CompanyProfileAsync(string nif, string version, Enum333? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (nif == null)
            {
                throw new ArgumentNullException(nameof(nif));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateCompanyProfileRequest(nif, version, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultCompanyFullInfoApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultCompanyFullInfoApiModel.DeserializeApiResultCompanyFullInfoApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns the company matching the requested NIF/UID. </summary>
        /// <param name="nif">
        /// A field that can be formatted either as a valid Spanish NIF (ex: A00000000) or a UID (ex: HyEyLl2sh0pk20ECa-og7Q).
        /// 
        ///             A UID-like string will come from the NIF field returned by the predictive search results.&quot;
        /// 
        ///             A valid NIF string will be used when the API method is invoked directly from the &apos;Add new client&apos; autocomplete feature of the NIF webform field.
        /// </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nif"/> or <paramref name="version"/> is null. </exception>
        public Response<ApiResultCompanyFullInfoApiModel> CompanyProfile(string nif, string version, Enum333? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (nif == null)
            {
                throw new ArgumentNullException(nameof(nif));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateCompanyProfileRequest(nif, version, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultCompanyFullInfoApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultCompanyFullInfoApiModel.DeserializeApiResultCompanyFullInfoApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateLatestCompanyChangesRequest(string nif, string version, Enum334? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/integrations/entities/latestCompanyChanges", false);
            uri.AppendQuery("nif", nif, true);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Returns the company latest changes for a given NIF/UID. </summary>
        /// <param name="nif"> The String to use. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nif"/> or <paramref name="version"/> is null. </exception>
        public async Task<Response<ApiResultCompanyLatestChangesApiModel>> LatestCompanyChangesAsync(string nif, string version, Enum334? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (nif == null)
            {
                throw new ArgumentNullException(nameof(nif));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateLatestCompanyChangesRequest(nif, version, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultCompanyLatestChangesApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultCompanyLatestChangesApiModel.DeserializeApiResultCompanyLatestChangesApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns the company latest changes for a given NIF/UID. </summary>
        /// <param name="nif"> The String to use. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="nif"/> or <paramref name="version"/> is null. </exception>
        public Response<ApiResultCompanyLatestChangesApiModel> LatestCompanyChanges(string nif, string version, Enum334? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (nif == null)
            {
                throw new ArgumentNullException(nameof(nif));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateLatestCompanyChangesRequest(nif, version, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultCompanyLatestChangesApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultCompanyLatestChangesApiModel.DeserializeApiResultCompanyLatestChangesApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePredictiveSearchRequest(string searchTerm, string version, Enum335? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/integrations/entities/predictiveSearch", false);
            uri.AppendQuery("searchTerm", searchTerm, true);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Returns all company names matching the requested string. </summary>
        /// <param name="searchTerm"> The name or part of the name of the company we are looking for. Ex: &quot;Contasimple&quot;. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchTerm"/> or <paramref name="version"/> is null. </exception>
        public async Task<Response<ApiResultPredictiveSearchResult>> PredictiveSearchAsync(string searchTerm, string version, Enum335? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (searchTerm == null)
            {
                throw new ArgumentNullException(nameof(searchTerm));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreatePredictiveSearchRequest(searchTerm, version, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultPredictiveSearchResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultPredictiveSearchResult.DeserializeApiResultPredictiveSearchResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns all company names matching the requested string. </summary>
        /// <param name="searchTerm"> The name or part of the name of the company we are looking for. Ex: &quot;Contasimple&quot;. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="searchTerm"/> or <paramref name="version"/> is null. </exception>
        public Response<ApiResultPredictiveSearchResult> PredictiveSearch(string searchTerm, string version, Enum335? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (searchTerm == null)
            {
                throw new ArgumentNullException(nameof(searchTerm));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreatePredictiveSearchRequest(searchTerm, version, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultPredictiveSearchResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultPredictiveSearchResult.DeserializeApiResultPredictiveSearchResult(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
