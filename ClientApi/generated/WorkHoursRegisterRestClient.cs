// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using ContasimpleAPI.Models;

namespace ContasimpleAPI
{
    internal partial class WorkHoursRegisterRestClient
    {
        private Uri endpoint;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of WorkHoursRegisterRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        public WorkHoursRegisterRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            endpoint ??= new Uri("https://api.contasimple.com");

            this.endpoint = endpoint;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateCreateRequest(string version, string workingHours, Enum1? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/WorkHoursRegister", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", "text/html");
            request.Content = new StringRequestContent(workingHours);
            return message;
        }

        /// <summary> Creates a new workingHours entry. </summary>
        /// <param name="version"> The String to use. </param>
        /// <param name="workingHours"> The corresponding API Model which defines the information to send to the API. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="workingHours"/> is null. </exception>
        public async Task<Response<ApiResultWorkingHoursApiModel>> CreateAsync(string version, string workingHours, Enum1? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (workingHours == null)
            {
                throw new ArgumentNullException(nameof(workingHours));
            }

            using var message = CreateCreateRequest(version, workingHours, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultWorkingHoursApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultWorkingHoursApiModel.DeserializeApiResultWorkingHoursApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Creates a new workingHours entry. </summary>
        /// <param name="version"> The String to use. </param>
        /// <param name="workingHours"> The corresponding API Model which defines the information to send to the API. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="workingHours"/> is null. </exception>
        public Response<ApiResultWorkingHoursApiModel> Create(string version, string workingHours, Enum1? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (workingHours == null)
            {
                throw new ArgumentNullException(nameof(workingHours));
            }

            using var message = CreateCreateRequest(version, workingHours, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultWorkingHoursApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultWorkingHoursApiModel.DeserializeApiResultWorkingHoursApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateRequest(string version, WorkingHoursCreateStartTimeApiModel workingHours, Enum1? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/WorkHoursRegister", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(workingHours);
            request.Content = content;
            return message;
        }

        /// <summary> Creates a new workingHours entry. </summary>
        /// <param name="version"> The String to use. </param>
        /// <param name="workingHours"> The corresponding API Model which defines the information to send to the API. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="workingHours"/> is null. </exception>
        public async Task<Response<ApiResultWorkingHoursApiModel>> CreateAsync(string version, WorkingHoursCreateStartTimeApiModel workingHours, Enum1? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (workingHours == null)
            {
                throw new ArgumentNullException(nameof(workingHours));
            }

            using var message = CreateCreateRequest(version, workingHours, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultWorkingHoursApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultWorkingHoursApiModel.DeserializeApiResultWorkingHoursApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Creates a new workingHours entry. </summary>
        /// <param name="version"> The String to use. </param>
        /// <param name="workingHours"> The corresponding API Model which defines the information to send to the API. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="workingHours"/> is null. </exception>
        public Response<ApiResultWorkingHoursApiModel> Create(string version, WorkingHoursCreateStartTimeApiModel workingHours, Enum1? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (workingHours == null)
            {
                throw new ArgumentNullException(nameof(workingHours));
            }

            using var message = CreateCreateRequest(version, workingHours, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultWorkingHoursApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultWorkingHoursApiModel.DeserializeApiResultWorkingHoursApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetLastUnclosedEntryForCurrentWorkingDayRequest(long userId, string version, Enum2? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/WorkHoursRegister/GetLastUnclosedEntryForCurrentWorkingDay/", false);
            uri.AppendPath(userId, true);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Gets the last unclosed entry for a given user for the latest 12h of the current working day. </summary>
        /// <param name="userId"> The identifier of the user for whom we want to retrieve the time entries. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public async Task<Response<ApiResultWorkingHoursApiModel>> GetLastUnclosedEntryForCurrentWorkingDayAsync(long userId, string version, Enum2? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateGetLastUnclosedEntryForCurrentWorkingDayRequest(userId, version, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultWorkingHoursApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultWorkingHoursApiModel.DeserializeApiResultWorkingHoursApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the last unclosed entry for a given user for the latest 12h of the current working day. </summary>
        /// <param name="userId"> The identifier of the user for whom we want to retrieve the time entries. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public Response<ApiResultWorkingHoursApiModel> GetLastUnclosedEntryForCurrentWorkingDay(long userId, string version, Enum2? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateGetLastUnclosedEntryForCurrentWorkingDayRequest(userId, version, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultWorkingHoursApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultWorkingHoursApiModel.DeserializeApiResultWorkingHoursApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetLatestOpenEntryForSpecificDayRequest(long userId, DateTimeOffset requestedDate, string version, Enum3? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/WorkHoursRegister/GetLatestOpenEntryForSpecificDay/", false);
            uri.AppendPath(userId, true);
            uri.AppendQuery("requestedDate", requestedDate, "O", true);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary>
        /// Gets the last unclosed entry for a given user for the latest 12h if the day passed as parameter is today.
        /// 
        /// For other days, gets the last unclosed entry for the whole day.
        /// 
        /// This method only can be used by company admins, company managers or company users as managers.
        /// </summary>
        /// <param name="userId"> The identifier of the user for whom we want to retrieve the time entries. </param>
        /// <param name="requestedDate"> The requested date to obtain the last unclosed entry. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public async Task<Response<ApiResultWorkingHoursApiModel>> GetLatestOpenEntryForSpecificDayAsync(long userId, DateTimeOffset requestedDate, string version, Enum3? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateGetLatestOpenEntryForSpecificDayRequest(userId, requestedDate, version, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultWorkingHoursApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultWorkingHoursApiModel.DeserializeApiResultWorkingHoursApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Gets the last unclosed entry for a given user for the latest 12h if the day passed as parameter is today.
        /// 
        /// For other days, gets the last unclosed entry for the whole day.
        /// 
        /// This method only can be used by company admins, company managers or company users as managers.
        /// </summary>
        /// <param name="userId"> The identifier of the user for whom we want to retrieve the time entries. </param>
        /// <param name="requestedDate"> The requested date to obtain the last unclosed entry. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public Response<ApiResultWorkingHoursApiModel> GetLatestOpenEntryForSpecificDay(long userId, DateTimeOffset requestedDate, string version, Enum3? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateGetLatestOpenEntryForSpecificDayRequest(userId, requestedDate, version, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultWorkingHoursApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultWorkingHoursApiModel.DeserializeApiResultWorkingHoursApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetReportRequest(string version, Enum4? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/WorkHoursRegister/GetReport", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            return message;
        }

        /// <summary>
        /// Get the total computed working hours and days for a certain user or all users.
        /// 
        /// WorkingHoursSumTotalFilter defines possible filters for this API method.
        /// 
        /// A user only can get the report if its company role is &apos;CompanyAdmin&apos;.
        /// </summary>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public async Task<Response<ApiListResultWorkingHoursSumTotalApiModel>> GetReportAsync(string version, Enum4? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateGetReportRequest(version, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultWorkingHoursSumTotalApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiListResultWorkingHoursSumTotalApiModel.DeserializeApiListResultWorkingHoursSumTotalApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Get the total computed working hours and days for a certain user or all users.
        /// 
        /// WorkingHoursSumTotalFilter defines possible filters for this API method.
        /// 
        /// A user only can get the report if its company role is &apos;CompanyAdmin&apos;.
        /// </summary>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public Response<ApiListResultWorkingHoursSumTotalApiModel> GetReport(string version, Enum4? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateGetReportRequest(version, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultWorkingHoursSumTotalApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiListResultWorkingHoursSumTotalApiModel.DeserializeApiListResultWorkingHoursSumTotalApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetReportExtendedRequest(string version, Enum5? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/WorkHoursRegister/GetReportExtended", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            return message;
        }

        /// <summary>
        /// Get the total computed working hours/day
        /// 
        /// A user only can get the report if its company role is &apos;CompanyAdmin&apos;.
        /// </summary>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public async Task<Response<ApiListResultWorkingHoursSumDailyApiModel>> GetReportExtendedAsync(string version, Enum5? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateGetReportExtendedRequest(version, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultWorkingHoursSumDailyApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiListResultWorkingHoursSumDailyApiModel.DeserializeApiListResultWorkingHoursSumDailyApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary>
        /// Get the total computed working hours/day
        /// 
        /// A user only can get the report if its company role is &apos;CompanyAdmin&apos;.
        /// </summary>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public Response<ApiListResultWorkingHoursSumDailyApiModel> GetReportExtended(string version, Enum5? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateGetReportExtendedRequest(version, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultWorkingHoursSumDailyApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiListResultWorkingHoursSumDailyApiModel.DeserializeApiListResultWorkingHoursSumDailyApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetReportForSignatureRequest(string version, Enum6? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/WorkHoursRegister/GetReportForSignature", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            return message;
        }

        /// <summary> Get the total computed working hours/day for signature. </summary>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public async Task<Response<ApiListResultWorkingHoursSumDailyApiModel>> GetReportForSignatureAsync(string version, Enum6? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateGetReportForSignatureRequest(version, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultWorkingHoursSumDailyApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiListResultWorkingHoursSumDailyApiModel.DeserializeApiListResultWorkingHoursSumDailyApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get the total computed working hours/day for signature. </summary>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public Response<ApiListResultWorkingHoursSumDailyApiModel> GetReportForSignature(string version, Enum6? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateGetReportForSignatureRequest(version, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultWorkingHoursSumDailyApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiListResultWorkingHoursSumDailyApiModel.DeserializeApiListResultWorkingHoursSumDailyApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetWorkHoursForCurrentDayRequest(string version, Enum7? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/WorkHoursRegister/GetWorkHoursForCurrentDay", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Gets the working hours summary for the current working day and user (a list with the work hours entries and the total worked hours and minutes). </summary>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public async Task<Response<ApiResultWorkingHoursSummaryCurrentDayApiModel>> GetWorkHoursForCurrentDayAsync(string version, Enum7? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateGetWorkHoursForCurrentDayRequest(version, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultWorkingHoursSummaryCurrentDayApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultWorkingHoursSummaryCurrentDayApiModel.DeserializeApiResultWorkingHoursSummaryCurrentDayApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the working hours summary for the current working day and user (a list with the work hours entries and the total worked hours and minutes). </summary>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public Response<ApiResultWorkingHoursSummaryCurrentDayApiModel> GetWorkHoursForCurrentDay(string version, Enum7? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateGetWorkHoursForCurrentDayRequest(version, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultWorkingHoursSummaryCurrentDayApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultWorkingHoursSummaryCurrentDayApiModel.DeserializeApiResultWorkingHoursSummaryCurrentDayApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetWorkHoursOverviewSpecificDayRequest(DateTimeOffset requestedDate, string version, bool? getIndividualEntries, Enum8? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/WorkHoursRegister/GetWorkHoursOverviewForSpecificDay", false);
            uri.AppendQuery("requestedDate", requestedDate, "O", true);
            if (getIndividualEntries != null)
            {
                uri.AppendQuery("getIndividualEntries", getIndividualEntries.Value, true);
            }
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            return message;
        }

        /// <summary> Gets a working hours overview for the day passed as parameter. </summary>
        /// <param name="requestedDate"> The requested day to get the overview. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="getIndividualEntries"> Indicates if the individual entries of the day for every user must be returned. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public async Task<Response<ApiListResultWorkHoursSummaryDayOverviewApiModel>> GetWorkHoursOverviewSpecificDayAsync(DateTimeOffset requestedDate, string version, bool? getIndividualEntries = null, Enum8? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateGetWorkHoursOverviewSpecificDayRequest(requestedDate, version, getIndividualEntries, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultWorkHoursSummaryDayOverviewApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiListResultWorkHoursSummaryDayOverviewApiModel.DeserializeApiListResultWorkHoursSummaryDayOverviewApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets a working hours overview for the day passed as parameter. </summary>
        /// <param name="requestedDate"> The requested day to get the overview. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="getIndividualEntries"> Indicates if the individual entries of the day for every user must be returned. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public Response<ApiListResultWorkHoursSummaryDayOverviewApiModel> GetWorkHoursOverviewSpecificDay(DateTimeOffset requestedDate, string version, bool? getIndividualEntries = null, Enum8? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateGetWorkHoursOverviewSpecificDayRequest(requestedDate, version, getIndividualEntries, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultWorkHoursSummaryDayOverviewApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiListResultWorkHoursSummaryDayOverviewApiModel.DeserializeApiListResultWorkHoursSummaryDayOverviewApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateEditRequest(long workingHoursId, string version, string workingHours, Enum9? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/WorkHoursRegister/editEntry/", false);
            uri.AppendPath(workingHoursId, true);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", "text/html");
            request.Content = new StringRequestContent(workingHours);
            return message;
        }

        /// <summary> Edits a working hours entry. </summary>
        /// <param name="workingHoursId"> The id of the workingHours entry that we want to edit. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="workingHours"> A WorkingHoursEditApiModel filled with the data as we wanted it to be edit. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="workingHours"/> is null. </exception>
        public async Task<Response<ApiResultWorkingHoursApiModel>> EditAsync(long workingHoursId, string version, string workingHours, Enum9? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (workingHours == null)
            {
                throw new ArgumentNullException(nameof(workingHours));
            }

            using var message = CreateEditRequest(workingHoursId, version, workingHours, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultWorkingHoursApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultWorkingHoursApiModel.DeserializeApiResultWorkingHoursApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Edits a working hours entry. </summary>
        /// <param name="workingHoursId"> The id of the workingHours entry that we want to edit. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="workingHours"> A WorkingHoursEditApiModel filled with the data as we wanted it to be edit. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="workingHours"/> is null. </exception>
        public Response<ApiResultWorkingHoursApiModel> Edit(long workingHoursId, string version, string workingHours, Enum9? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (workingHours == null)
            {
                throw new ArgumentNullException(nameof(workingHours));
            }

            using var message = CreateEditRequest(workingHoursId, version, workingHours, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultWorkingHoursApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultWorkingHoursApiModel.DeserializeApiResultWorkingHoursApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateEditRequest(long workingHoursId, string version, WorkingHoursEditApiModel workingHours, Enum9? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/WorkHoursRegister/editEntry/", false);
            uri.AppendPath(workingHoursId, true);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(workingHours);
            request.Content = content;
            return message;
        }

        /// <summary> Edits a working hours entry. </summary>
        /// <param name="workingHoursId"> The id of the workingHours entry that we want to edit. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="workingHours"> A WorkingHoursEditApiModel filled with the data as we wanted it to be edit. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="workingHours"/> is null. </exception>
        public async Task<Response<ApiResultWorkingHoursApiModel>> EditAsync(long workingHoursId, string version, WorkingHoursEditApiModel workingHours, Enum9? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (workingHours == null)
            {
                throw new ArgumentNullException(nameof(workingHours));
            }

            using var message = CreateEditRequest(workingHoursId, version, workingHours, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultWorkingHoursApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultWorkingHoursApiModel.DeserializeApiResultWorkingHoursApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Edits a working hours entry. </summary>
        /// <param name="workingHoursId"> The id of the workingHours entry that we want to edit. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="workingHours"> A WorkingHoursEditApiModel filled with the data as we wanted it to be edit. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="workingHours"/> is null. </exception>
        public Response<ApiResultWorkingHoursApiModel> Edit(long workingHoursId, string version, WorkingHoursEditApiModel workingHours, Enum9? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (workingHours == null)
            {
                throw new ArgumentNullException(nameof(workingHours));
            }

            using var message = CreateEditRequest(workingHoursId, version, workingHours, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultWorkingHoursApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultWorkingHoursApiModel.DeserializeApiResultWorkingHoursApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteRequest(long workingHoursId, string version, Enum10? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/WorkHoursRegister/", false);
            uri.AppendPath(workingHoursId, true);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Deletes a workingHours entry (soft delete by boolean field). </summary>
        /// <param name="workingHoursId"> The id of the workingHours entry that we want to delete. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public async Task<Response<ApiResultBoolean>> DeleteAsync(long workingHoursId, string version, Enum10? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateDeleteRequest(workingHoursId, version, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultBoolean value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultBoolean.DeserializeApiResultBoolean(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deletes a workingHours entry (soft delete by boolean field). </summary>
        /// <param name="workingHoursId"> The id of the workingHours entry that we want to delete. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public Response<ApiResultBoolean> Delete(long workingHoursId, string version, Enum10? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateDeleteRequest(workingHoursId, version, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultBoolean value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultBoolean.DeserializeApiResultBoolean(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRequest(long workingHoursId, string version, Enum11? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/WorkHoursRegister/", false);
            uri.AppendPath(workingHoursId, true);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Get working hours entry by id. </summary>
        /// <param name="workingHoursId"> The identifier of the working hours entry to retrieve. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public async Task<Response<ApiResultWorkingHoursApiModel>> GetAsync(long workingHoursId, string version, Enum11? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateGetRequest(workingHoursId, version, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultWorkingHoursApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultWorkingHoursApiModel.DeserializeApiResultWorkingHoursApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Get working hours entry by id. </summary>
        /// <param name="workingHoursId"> The identifier of the working hours entry to retrieve. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> is null. </exception>
        public Response<ApiResultWorkingHoursApiModel> Get(long workingHoursId, string version, Enum11? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateGetRequest(workingHoursId, version, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultWorkingHoursApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultWorkingHoursApiModel.DeserializeApiResultWorkingHoursApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateRequest(long workingHoursId, string version, string workingHours, Enum12? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/WorkHoursRegister/", false);
            uri.AppendPath(workingHoursId, true);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", "text/html");
            request.Content = new StringRequestContent(workingHours);
            return message;
        }

        /// <summary> Updates a new workingHours entry. </summary>
        /// <param name="workingHoursId"> The id of the workingHours entry that we want to update. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="workingHours"> A WorkingHoursApiModel filled with the data as we wanted it to be updated. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="workingHours"/> is null. </exception>
        public async Task<Response<ApiResultWorkingHoursApiModel>> UpdateAsync(long workingHoursId, string version, string workingHours, Enum12? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (workingHours == null)
            {
                throw new ArgumentNullException(nameof(workingHours));
            }

            using var message = CreateUpdateRequest(workingHoursId, version, workingHours, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultWorkingHoursApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultWorkingHoursApiModel.DeserializeApiResultWorkingHoursApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Updates a new workingHours entry. </summary>
        /// <param name="workingHoursId"> The id of the workingHours entry that we want to update. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="workingHours"> A WorkingHoursApiModel filled with the data as we wanted it to be updated. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="workingHours"/> is null. </exception>
        public Response<ApiResultWorkingHoursApiModel> Update(long workingHoursId, string version, string workingHours, Enum12? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (workingHours == null)
            {
                throw new ArgumentNullException(nameof(workingHours));
            }

            using var message = CreateUpdateRequest(workingHoursId, version, workingHours, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultWorkingHoursApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultWorkingHoursApiModel.DeserializeApiResultWorkingHoursApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateRequest(long workingHoursId, string version, WorkingHoursUpdateEndTimeApiModel workingHours, Enum12? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/WorkHoursRegister/", false);
            uri.AppendPath(workingHoursId, true);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(workingHours);
            request.Content = content;
            return message;
        }

        /// <summary> Updates a new workingHours entry. </summary>
        /// <param name="workingHoursId"> The id of the workingHours entry that we want to update. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="workingHours"> A WorkingHoursApiModel filled with the data as we wanted it to be updated. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="workingHours"/> is null. </exception>
        public async Task<Response<ApiResultWorkingHoursApiModel>> UpdateAsync(long workingHoursId, string version, WorkingHoursUpdateEndTimeApiModel workingHours, Enum12? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (workingHours == null)
            {
                throw new ArgumentNullException(nameof(workingHours));
            }

            using var message = CreateUpdateRequest(workingHoursId, version, workingHours, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultWorkingHoursApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultWorkingHoursApiModel.DeserializeApiResultWorkingHoursApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Updates a new workingHours entry. </summary>
        /// <param name="workingHoursId"> The id of the workingHours entry that we want to update. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="workingHours"> A WorkingHoursApiModel filled with the data as we wanted it to be updated. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="workingHours"/> is null. </exception>
        public Response<ApiResultWorkingHoursApiModel> Update(long workingHoursId, string version, WorkingHoursUpdateEndTimeApiModel workingHours, Enum12? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (workingHours == null)
            {
                throw new ArgumentNullException(nameof(workingHours));
            }

            using var message = CreateUpdateRequest(workingHoursId, version, workingHours, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultWorkingHoursApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultWorkingHoursApiModel.DeserializeApiResultWorkingHoursApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
