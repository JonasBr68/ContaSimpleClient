// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace ContasimpleAPI.Models
{
    /// <summary> Provides information about a waiting task. </summary>
    public partial class AsyncTasksTaskStatusModel
    {
        /// <summary> Initializes a new instance of AsyncTasksTaskStatusModel. </summary>
        internal AsyncTasksTaskStatusModel()
        {
        }

        /// <summary> Initializes a new instance of AsyncTasksTaskStatusModel. </summary>
        /// <param name="companyEmail"> The requesting company email address. </param>
        /// <param name="companyId"> The requesting company identifier. </param>
        /// <param name="id"> The task identifier. </param>
        /// <param name="info"> The task extra information. </param>
        /// <param name="lastAttempt"> The execution starting time. </param>
        /// <param name="queueTime"> The requesting time. </param>
        /// <param name="status"> The requested status. </param>
        /// <param name="task"> The requested task. </param>
        /// <param name="userEmail"> The requesting user email address. </param>
        /// <param name="userId"> The requesting user identifier. </param>
        /// <param name="waitingTime"> The task waiting time. </param>
        /// <param name="workingTime"> The task working time. </param>
        internal AsyncTasksTaskStatusModel(string companyEmail, long? companyId, long? id, string info, DateTimeOffset? lastAttempt, DateTimeOffset? queueTime, AsyncTasksTaskStatusModelStatus? status, AsyncTasksTaskStatusModelTask? task, string userEmail, long? userId, string waitingTime, string workingTime)
        {
            CompanyEmail = companyEmail;
            CompanyId = companyId;
            Id = id;
            Info = info;
            LastAttempt = lastAttempt;
            QueueTime = queueTime;
            Status = status;
            Task = task;
            UserEmail = userEmail;
            UserId = userId;
            WaitingTime = waitingTime;
            WorkingTime = workingTime;
        }

        /// <summary> The requesting company email address. </summary>
        public string CompanyEmail { get; }
        /// <summary> The requesting company identifier. </summary>
        public long? CompanyId { get; }
        /// <summary> The task identifier. </summary>
        public long? Id { get; }
        /// <summary> The task extra information. </summary>
        public string Info { get; }
        /// <summary> The execution starting time. </summary>
        public DateTimeOffset? LastAttempt { get; }
        /// <summary> The requesting time. </summary>
        public DateTimeOffset? QueueTime { get; }
        /// <summary> The requested status. </summary>
        public AsyncTasksTaskStatusModelStatus? Status { get; }
        /// <summary> The requested task. </summary>
        public AsyncTasksTaskStatusModelTask? Task { get; }
        /// <summary> The requesting user email address. </summary>
        public string UserEmail { get; }
        /// <summary> The requesting user identifier. </summary>
        public long? UserId { get; }
        /// <summary> The task waiting time. </summary>
        public string WaitingTime { get; }
        /// <summary> The task working time. </summary>
        public string WorkingTime { get; }
    }
}
