// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using Azure.Core;

namespace ContasimpleAPI.Models
{
    /// <summary> Contains extra configuration for the company. </summary>
    public partial class CompanyExtraInformationApiModel
    {
        /// <summary> Initializes a new instance of CompanyExtraInformationApiModel. </summary>
        internal CompanyExtraInformationApiModel()
        {
            ReTypes = new ChangeTrackingList<ReTypeApiModel>();
            RetentionTypes = new ChangeTrackingList<RetentionTypeApiModel>();
            VatTypes = new ChangeTrackingList<VatTypeApiModel>();
        }

        /// <summary> Initializes a new instance of CompanyExtraInformationApiModel. </summary>
        /// <param name="companyIdentifierName"> The name of the Company Identifier (NIF title). </param>
        /// <param name="currencySymbol"> The symbol of the company currency. </param>
        /// <param name="currencySymbolIsSuffix"> Indicates if the currency sumbol goes after (true) or before (false) the value. </param>
        /// <param name="customAutoNumberFormat"> The company auto-numbering format. </param>
        /// <param name="customDeliveryNoteAutoNumberFormat"> The company auto-numbering format for delivery notes. </param>
        /// <param name="customEntityField1Name"> The name of the company custom field 1. </param>
        /// <param name="customEntityField2Name"> The name of the company custom field 2. </param>
        /// <param name="customEstimateAutoNumberFormat"> The company auto-numbering format for estimates. </param>
        /// <param name="deliveryNoteCulture"> The culture for company delivery notes. </param>
        /// <param name="enablePaginationInLists"> Enable or disable pagination on lists. </param>
        /// <param name="entity"> The company owner entity. </param>
        /// <param name="estimateCulture"> The culture for company estimates. </param>
        /// <param name="id"> The identifier of the extra information. </param>
        /// <param name="importDeliveryNoteLineByLine"> When we invoice a delivery note, weather we should group lines of the delivery note or not. </param>
        /// <param name="invoiceCulture"> The culture for company invoices. </param>
        /// <param name="invoiceDataFilled"> Indicates if the company invoice data have been filled. </param>
        /// <param name="reName"> The name of the RE tax. </param>
        /// <param name="reTypes"> The list of RE types for the company. </param>
        /// <param name="retentionName"> The name of the retention tax. </param>
        /// <param name="retentionTypes"> The list of retention types for the company. </param>
        /// <param name="signElectronicInvoices"> The sign option for the electronic invoices. </param>
        /// <param name="signPDFDeliveryNotes"> The sign option for the PDF Delivery notes. </param>
        /// <param name="signPDFEstimates"> The sign option for the PDF Estimates. </param>
        /// <param name="signPDFInvoices"> The sign option for the PDF invoices. </param>
        /// <param name="signVirtualDriveFiles"> The sign option for the virtual drive files. </param>
        /// <param name="vatName"> The name of the VAT tax. </param>
        /// <param name="vatTypes"> The list of VAT types for the company. </param>
        internal CompanyExtraInformationApiModel(string companyIdentifierName, string currencySymbol, bool? currencySymbolIsSuffix, string customAutoNumberFormat, string customDeliveryNoteAutoNumberFormat, string customEntityField1Name, string customEntityField2Name, string customEstimateAutoNumberFormat, string deliveryNoteCulture, bool? enablePaginationInLists, EntityApiModel entity, string estimateCulture, long? id, bool? importDeliveryNoteLineByLine, string invoiceCulture, bool? invoiceDataFilled, string reName, IReadOnlyList<ReTypeApiModel> reTypes, string retentionName, IReadOnlyList<RetentionTypeApiModel> retentionTypes, CompanyExtraInformationApiModelSignElectronicInvoices? signElectronicInvoices, CompanyExtraInformationApiModelSignPDFDeliveryNotes? signPDFDeliveryNotes, CompanyExtraInformationApiModelSignPDFEstimates? signPDFEstimates, CompanyExtraInformationApiModelSignPDFInvoices? signPDFInvoices, CompanyExtraInformationApiModelSignVirtualDriveFiles? signVirtualDriveFiles, string vatName, IReadOnlyList<VatTypeApiModel> vatTypes)
        {
            CompanyIdentifierName = companyIdentifierName;
            CurrencySymbol = currencySymbol;
            CurrencySymbolIsSuffix = currencySymbolIsSuffix;
            CustomAutoNumberFormat = customAutoNumberFormat;
            CustomDeliveryNoteAutoNumberFormat = customDeliveryNoteAutoNumberFormat;
            CustomEntityField1Name = customEntityField1Name;
            CustomEntityField2Name = customEntityField2Name;
            CustomEstimateAutoNumberFormat = customEstimateAutoNumberFormat;
            DeliveryNoteCulture = deliveryNoteCulture;
            EnablePaginationInLists = enablePaginationInLists;
            Entity = entity;
            EstimateCulture = estimateCulture;
            Id = id;
            ImportDeliveryNoteLineByLine = importDeliveryNoteLineByLine;
            InvoiceCulture = invoiceCulture;
            InvoiceDataFilled = invoiceDataFilled;
            ReName = reName;
            ReTypes = reTypes;
            RetentionName = retentionName;
            RetentionTypes = retentionTypes;
            SignElectronicInvoices = signElectronicInvoices;
            SignPDFDeliveryNotes = signPDFDeliveryNotes;
            SignPDFEstimates = signPDFEstimates;
            SignPDFInvoices = signPDFInvoices;
            SignVirtualDriveFiles = signVirtualDriveFiles;
            VatName = vatName;
            VatTypes = vatTypes;
        }

        /// <summary> The name of the Company Identifier (NIF title). </summary>
        public string CompanyIdentifierName { get; }
        /// <summary> The symbol of the company currency. </summary>
        public string CurrencySymbol { get; }
        /// <summary> Indicates if the currency sumbol goes after (true) or before (false) the value. </summary>
        public bool? CurrencySymbolIsSuffix { get; }
        /// <summary> The company auto-numbering format. </summary>
        public string CustomAutoNumberFormat { get; }
        /// <summary> The company auto-numbering format for delivery notes. </summary>
        public string CustomDeliveryNoteAutoNumberFormat { get; }
        /// <summary> The name of the company custom field 1. </summary>
        public string CustomEntityField1Name { get; }
        /// <summary> The name of the company custom field 2. </summary>
        public string CustomEntityField2Name { get; }
        /// <summary> The company auto-numbering format for estimates. </summary>
        public string CustomEstimateAutoNumberFormat { get; }
        /// <summary> The culture for company delivery notes. </summary>
        public string DeliveryNoteCulture { get; }
        /// <summary> Enable or disable pagination on lists. </summary>
        public bool? EnablePaginationInLists { get; }
        /// <summary> The company owner entity. </summary>
        public EntityApiModel Entity { get; }
        /// <summary> The culture for company estimates. </summary>
        public string EstimateCulture { get; }
        /// <summary> The identifier of the extra information. </summary>
        public long? Id { get; }
        /// <summary> When we invoice a delivery note, weather we should group lines of the delivery note or not. </summary>
        public bool? ImportDeliveryNoteLineByLine { get; }
        /// <summary> The culture for company invoices. </summary>
        public string InvoiceCulture { get; }
        /// <summary> Indicates if the company invoice data have been filled. </summary>
        public bool? InvoiceDataFilled { get; }
        /// <summary> The name of the RE tax. </summary>
        public string ReName { get; }
        /// <summary> The list of RE types for the company. </summary>
        public IReadOnlyList<ReTypeApiModel> ReTypes { get; }
        /// <summary> The name of the retention tax. </summary>
        public string RetentionName { get; }
        /// <summary> The list of retention types for the company. </summary>
        public IReadOnlyList<RetentionTypeApiModel> RetentionTypes { get; }
        /// <summary> The sign option for the electronic invoices. </summary>
        public CompanyExtraInformationApiModelSignElectronicInvoices? SignElectronicInvoices { get; }
        /// <summary> The sign option for the PDF Delivery notes. </summary>
        public CompanyExtraInformationApiModelSignPDFDeliveryNotes? SignPDFDeliveryNotes { get; }
        /// <summary> The sign option for the PDF Estimates. </summary>
        public CompanyExtraInformationApiModelSignPDFEstimates? SignPDFEstimates { get; }
        /// <summary> The sign option for the PDF invoices. </summary>
        public CompanyExtraInformationApiModelSignPDFInvoices? SignPDFInvoices { get; }
        /// <summary> The sign option for the virtual drive files. </summary>
        public CompanyExtraInformationApiModelSignVirtualDriveFiles? SignVirtualDriveFiles { get; }
        /// <summary> The name of the VAT tax. </summary>
        public string VatName { get; }
        /// <summary> The list of VAT types for the company. </summary>
        public IReadOnlyList<VatTypeApiModel> VatTypes { get; }
    }
}
