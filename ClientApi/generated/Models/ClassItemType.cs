// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace ContasimpleAPI.Models
{
    /// <summary> The ClassItemType. </summary>
    public readonly partial struct ClassItemType : IEquatable<ClassItemType>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="ClassItemType"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public ClassItemType(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string GoodsValue = "Goods";
        private const string ServicesValue = "Services";

        /// <summary> Goods. </summary>
        public static ClassItemType Goods { get; } = new ClassItemType(GoodsValue);
        /// <summary> Services. </summary>
        public static ClassItemType Services { get; } = new ClassItemType(ServicesValue);
        /// <summary> Determines if two <see cref="ClassItemType"/> values are the same. </summary>
        public static bool operator ==(ClassItemType left, ClassItemType right) => left.Equals(right);
        /// <summary> Determines if two <see cref="ClassItemType"/> values are not the same. </summary>
        public static bool operator !=(ClassItemType left, ClassItemType right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="ClassItemType"/>. </summary>
        public static implicit operator ClassItemType(string value) => new ClassItemType(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is ClassItemType other && Equals(other);
        /// <inheritdoc />
        public bool Equals(ClassItemType other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
