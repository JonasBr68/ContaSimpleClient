// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Collections.Generic;
using Azure.Core;

namespace ContasimpleAPI.Models
{
    /// <summary> Contains the information for an invoice. </summary>
    public partial class InvoiceApiModel
    {
        /// <summary> Initializes a new instance of InvoiceApiModel. </summary>
        internal InvoiceApiModel()
        {
            Lines = new ChangeTrackingList<InvoiceLineApiModel>();
            Payments = new ChangeTrackingList<DocumentPaymentApiModel>();
        }

        /// <summary> Initializes a new instance of InvoiceApiModel. </summary>
        /// <param name="aeatAprovedFileId"> If not NULL contains the identifier of the file that contains the related certified document. </param>
        /// <param name="computablePercentage">
        /// Gets or Sets the percentage of the invoice that will be involved in the fiscal computations.
        /// 
        ///     IMPORTANT: This property only makes sense with invoices of type Received.
        /// 
        ///     Issued invoices should always have a ComputablePercentage of 100% because otherwise the invoice
        /// 
        ///     RetentionAmount (which may have already been sent to the administration by the invoice payee)
        /// 
        ///     would not match the computable invoice amount.
        /// </param>
        /// <param name="computablePercentageVAT"> Gets or Sets the percentage of the expense that will be involved in the IVA Imputation. </param>
        /// <param name="creationDate"> The date when the invoice was created. </param>
        /// <param name="entityString"> The name that represents the issuer or target entity of the invoice. </param>
        /// <param name="expirationDate"> Contains invoice expiration date (cuold be null). </param>
        /// <param name="footer"> The invoice footer. </param>
        /// <param name="hasAeatAprovedFile"> Checks if the current invoice has a certified file. </param>
        /// <param name="id"> The identifier of the invoice. </param>
        /// <param name="invoiceClass"> The invoice class. </param>
        /// <param name="invoiceClassDescription"> The invoice class description. </param>
        /// <param name="invoiceDate"> The invoice date. </param>
        /// <param name="isCashCriteria"> Indicates if the issuer or target of the invoice is subject to &quot;Regimen de Criterio de Caja&quot;. </param>
        /// <param name="isRectificationInvoice"> Checks if the current invoice is a rectification invoice. </param>
        /// <param name="issuer"> The entity issuer. The one who generated the invoice. </param>
        /// <param name="lastUpdateDate"> The last time the invoice was updated. </param>
        /// <param name="lines"> The line objects for the invoice. </param>
        /// <param name="notes"> . </param>
        /// <param name="number"> The invoice number. </param>
        /// <param name="numberingFormatId"> If not NULL contains the identifier of the selected numbering format. </param>
        /// <param name="operationDate"> The operation date of the invoice. </param>
        /// <param name="operationType"> The type of operation. </param>
        /// <param name="operationTypeDescription"> The operation type description. </param>
        /// <param name="originalIssuerEntityID"> Original ID of the issuer of the invoice. </param>
        /// <param name="originalTargetEntityID"> Original ID of the target of the invoice. </param>
        /// <param name="payments"> The invoice payments. </param>
        /// <param name="period"> The invoice period. </param>
        /// <param name="rectifiesInvoiceId"> If not NULL contains the identifier of the invoice which the current invoice is rectifying. </param>
        /// <param name="relatedEstimateId"> The identifier of the estimate related to the delivery note (if exists). </param>
        /// <param name="retentionAmount"> The invoice retention amount. </param>
        /// <param name="retentionPercentage"> The invoice retention percentage. </param>
        /// <param name="status"> The current status of the invoice. </param>
        /// <param name="target"> The entity target. The receiver of the invoice. </param>
        /// <param name="totalAmount">
        /// Gets the total final amount for the invoice (the value returned includes the
        /// 
        /// addition of the taxable amount plus the VAT amount for every line) less the
        /// 
        /// retention amount. TotalAmount = BI +IVA - Retencion.
        /// </param>
        /// <param name="totalAmountPerPay"> Returns the pending invoice amount to pay. </param>
        /// <param name="totalComputableAmount"> Returns the TotalAmount of the invoice that is Computable. </param>
        /// <param name="totalComputableAmountForVAT"> Returns the TotalAmount of the invoice that is Computable for all VAT computations. </param>
        /// <param name="totalPayedAmount"> Returns the amount of money payed. </param>
        /// <param name="totalReAmount"> The total RE amount of the invoice. </param>
        /// <param name="totalTaxableAmount">
        /// Gets the total taxable amount for the invoice (the value returned includes the
        /// 
        /// addition of the taxable amounts for the several lines). (Spain: Base imponible).
        /// </param>
        /// <param name="totalVatAmount">
        /// Gets the total VAT amount for the invoice (the value returned includes the
        /// 
        /// addition of the VAT amounts for the several lines).
        /// </param>
        /// <param name="type"> The invoice type. </param>
        internal InvoiceApiModel(long? aeatAprovedFileId, double? computablePercentage, double? computablePercentageVAT, DateTimeOffset? creationDate, string entityString, DateTimeOffset? expirationDate, string footer, bool? hasAeatAprovedFile, long? id, int? invoiceClass, string invoiceClassDescription, DateTimeOffset? invoiceDate, bool? isCashCriteria, bool? isRectificationInvoice, DocumentEntityApiModel issuer, DateTimeOffset? lastUpdateDate, IReadOnlyList<InvoiceLineApiModel> lines, string notes, string number, long? numberingFormatId, DateTimeOffset? operationDate, InvoiceApiModelOperationType? operationType, string operationTypeDescription, long? originalIssuerEntityID, long? originalTargetEntityID, IReadOnlyList<DocumentPaymentApiModel> payments, string period, long? rectifiesInvoiceId, long? relatedEstimateId, double? retentionAmount, double? retentionPercentage, InvoiceApiModelStatus? status, DocumentEntityApiModel target, double? totalAmount, double? totalAmountPerPay, double? totalComputableAmount, double? totalComputableAmountForVAT, double? totalPayedAmount, double? totalReAmount, double? totalTaxableAmount, double? totalVatAmount, InvoiceApiModelType? type)
        {
            AeatAprovedFileId = aeatAprovedFileId;
            ComputablePercentage = computablePercentage;
            ComputablePercentageVAT = computablePercentageVAT;
            CreationDate = creationDate;
            EntityString = entityString;
            ExpirationDate = expirationDate;
            Footer = footer;
            HasAeatAprovedFile = hasAeatAprovedFile;
            Id = id;
            InvoiceClass = invoiceClass;
            InvoiceClassDescription = invoiceClassDescription;
            InvoiceDate = invoiceDate;
            IsCashCriteria = isCashCriteria;
            IsRectificationInvoice = isRectificationInvoice;
            Issuer = issuer;
            LastUpdateDate = lastUpdateDate;
            Lines = lines;
            Notes = notes;
            Number = number;
            NumberingFormatId = numberingFormatId;
            OperationDate = operationDate;
            OperationType = operationType;
            OperationTypeDescription = operationTypeDescription;
            OriginalIssuerEntityID = originalIssuerEntityID;
            OriginalTargetEntityID = originalTargetEntityID;
            Payments = payments;
            Period = period;
            RectifiesInvoiceId = rectifiesInvoiceId;
            RelatedEstimateId = relatedEstimateId;
            RetentionAmount = retentionAmount;
            RetentionPercentage = retentionPercentage;
            Status = status;
            Target = target;
            TotalAmount = totalAmount;
            TotalAmountPerPay = totalAmountPerPay;
            TotalComputableAmount = totalComputableAmount;
            TotalComputableAmountForVAT = totalComputableAmountForVAT;
            TotalPayedAmount = totalPayedAmount;
            TotalReAmount = totalReAmount;
            TotalTaxableAmount = totalTaxableAmount;
            TotalVatAmount = totalVatAmount;
            Type = type;
        }

        /// <summary> If not NULL contains the identifier of the file that contains the related certified document. </summary>
        public long? AeatAprovedFileId { get; }
        /// <summary>
        /// Gets or Sets the percentage of the invoice that will be involved in the fiscal computations.
        /// 
        ///     IMPORTANT: This property only makes sense with invoices of type Received.
        /// 
        ///     Issued invoices should always have a ComputablePercentage of 100% because otherwise the invoice
        /// 
        ///     RetentionAmount (which may have already been sent to the administration by the invoice payee)
        /// 
        ///     would not match the computable invoice amount.
        /// </summary>
        public double? ComputablePercentage { get; }
        /// <summary> Gets or Sets the percentage of the expense that will be involved in the IVA Imputation. </summary>
        public double? ComputablePercentageVAT { get; }
        /// <summary> The date when the invoice was created. </summary>
        public DateTimeOffset? CreationDate { get; }
        /// <summary> The name that represents the issuer or target entity of the invoice. </summary>
        public string EntityString { get; }
        /// <summary> Contains invoice expiration date (cuold be null). </summary>
        public DateTimeOffset? ExpirationDate { get; }
        /// <summary> The invoice footer. </summary>
        public string Footer { get; }
        /// <summary> Checks if the current invoice has a certified file. </summary>
        public bool? HasAeatAprovedFile { get; }
        /// <summary> The identifier of the invoice. </summary>
        public long? Id { get; }
        /// <summary> The invoice class. </summary>
        public int? InvoiceClass { get; }
        /// <summary> The invoice class description. </summary>
        public string InvoiceClassDescription { get; }
        /// <summary> The invoice date. </summary>
        public DateTimeOffset? InvoiceDate { get; }
        /// <summary> Indicates if the issuer or target of the invoice is subject to &quot;Regimen de Criterio de Caja&quot;. </summary>
        public bool? IsCashCriteria { get; }
        /// <summary> Checks if the current invoice is a rectification invoice. </summary>
        public bool? IsRectificationInvoice { get; }
        /// <summary> The entity issuer. The one who generated the invoice. </summary>
        public DocumentEntityApiModel Issuer { get; }
        /// <summary> The last time the invoice was updated. </summary>
        public DateTimeOffset? LastUpdateDate { get; }
        /// <summary> The line objects for the invoice. </summary>
        public IReadOnlyList<InvoiceLineApiModel> Lines { get; }
        public string Notes { get; }
        /// <summary> The invoice number. </summary>
        public string Number { get; }
        /// <summary> If not NULL contains the identifier of the selected numbering format. </summary>
        public long? NumberingFormatId { get; }
        /// <summary> The operation date of the invoice. </summary>
        public DateTimeOffset? OperationDate { get; }
        /// <summary> The type of operation. </summary>
        public InvoiceApiModelOperationType? OperationType { get; }
        /// <summary> The operation type description. </summary>
        public string OperationTypeDescription { get; }
        /// <summary> Original ID of the issuer of the invoice. </summary>
        public long? OriginalIssuerEntityID { get; }
        /// <summary> Original ID of the target of the invoice. </summary>
        public long? OriginalTargetEntityID { get; }
        /// <summary> The invoice payments. </summary>
        public IReadOnlyList<DocumentPaymentApiModel> Payments { get; }
        /// <summary> The invoice period. </summary>
        public string Period { get; }
        /// <summary> If not NULL contains the identifier of the invoice which the current invoice is rectifying. </summary>
        public long? RectifiesInvoiceId { get; }
        /// <summary> The identifier of the estimate related to the delivery note (if exists). </summary>
        public long? RelatedEstimateId { get; }
        /// <summary> The invoice retention amount. </summary>
        public double? RetentionAmount { get; }
        /// <summary> The invoice retention percentage. </summary>
        public double? RetentionPercentage { get; }
        /// <summary> The current status of the invoice. </summary>
        public InvoiceApiModelStatus? Status { get; }
        /// <summary> The entity target. The receiver of the invoice. </summary>
        public DocumentEntityApiModel Target { get; }
        /// <summary>
        /// Gets the total final amount for the invoice (the value returned includes the
        /// 
        /// addition of the taxable amount plus the VAT amount for every line) less the
        /// 
        /// retention amount. TotalAmount = BI +IVA - Retencion.
        /// </summary>
        public double? TotalAmount { get; }
        /// <summary> Returns the pending invoice amount to pay. </summary>
        public double? TotalAmountPerPay { get; }
        /// <summary> Returns the TotalAmount of the invoice that is Computable. </summary>
        public double? TotalComputableAmount { get; }
        /// <summary> Returns the TotalAmount of the invoice that is Computable for all VAT computations. </summary>
        public double? TotalComputableAmountForVAT { get; }
        /// <summary> Returns the amount of money payed. </summary>
        public double? TotalPayedAmount { get; }
        /// <summary> The total RE amount of the invoice. </summary>
        public double? TotalReAmount { get; }
        /// <summary>
        /// Gets the total taxable amount for the invoice (the value returned includes the
        /// 
        /// addition of the taxable amounts for the several lines). (Spain: Base imponible).
        /// </summary>
        public double? TotalTaxableAmount { get; }
        /// <summary>
        /// Gets the total VAT amount for the invoice (the value returned includes the
        /// 
        /// addition of the VAT amounts for the several lines).
        /// </summary>
        public double? TotalVatAmount { get; }
        /// <summary> The invoice type. </summary>
        public InvoiceApiModelType? Type { get; }
    }
}
