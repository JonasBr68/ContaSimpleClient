// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Xml.Linq;
using Azure.Core;

namespace ContasimpleAPI.Models
{
    public partial class ApiAccessApiModel
    {
        internal static ApiAccessApiModel DeserializeApiAccessApiModel(JsonElement element)
        {
            Optional<ApiClientApiModel> apiClient = default;
            Optional<bool> canDisable = default;
            Optional<DateTimeOffset> firstAccessTime = default;
            Optional<bool> isActive = default;
            Optional<DateTimeOffset> lastAccessTime = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("apiClient"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    apiClient = ApiClientApiModel.DeserializeApiClientApiModel(property.Value);
                    continue;
                }
                if (property.NameEquals("canDisable"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    canDisable = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("firstAccessTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    firstAccessTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("isActive"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isActive = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("lastAccessTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    lastAccessTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
            }
            return new ApiAccessApiModel(apiClient.Value, Optional.ToNullable(canDisable), Optional.ToNullable(firstAccessTime), Optional.ToNullable(isActive), Optional.ToNullable(lastAccessTime));
        }

        internal static ApiAccessApiModel DeserializeApiAccessApiModel(XElement element)
        {
            ApiClientApiModel apiClient = default;
            bool? canDisable = default;
            DateTimeOffset? firstAccessTime = default;
            bool? isActive = default;
            DateTimeOffset? lastAccessTime = default;
            if (element.Element("apiClient") is XElement apiClientElement)
            {
                apiClient = ApiClientApiModel.DeserializeApiClientApiModel(apiClientElement);
            }
            if (element.Element("canDisable") is XElement canDisableElement)
            {
                canDisable = (bool?)canDisableElement;
            }
            if (element.Element("firstAccessTime") is XElement firstAccessTimeElement)
            {
                firstAccessTime = firstAccessTimeElement.GetDateTimeOffsetValue("O");
            }
            if (element.Element("isActive") is XElement isActiveElement)
            {
                isActive = (bool?)isActiveElement;
            }
            if (element.Element("lastAccessTime") is XElement lastAccessTimeElement)
            {
                lastAccessTime = lastAccessTimeElement.GetDateTimeOffsetValue("O");
            }
            return new ApiAccessApiModel(apiClient, canDisable, firstAccessTime, isActive, lastAccessTime);
        }
    }
}
