// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace ContasimpleAPI.Models
{
    /// <summary> The Enum409. </summary>
    public readonly partial struct Enum409 : IEquatable<Enum409>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="Enum409"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Enum409(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string WebValue = "Web";
        private const string IOSValue = "iOS";
        private const string AndroidValue = "Android";

        /// <summary> Web. </summary>
        public static Enum409 Web { get; } = new Enum409(WebValue);
        /// <summary> iOS. </summary>
        public static Enum409 IOS { get; } = new Enum409(IOSValue);
        /// <summary> Android. </summary>
        public static Enum409 Android { get; } = new Enum409(AndroidValue);
        /// <summary> Determines if two <see cref="Enum409"/> values are the same. </summary>
        public static bool operator ==(Enum409 left, Enum409 right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Enum409"/> values are not the same. </summary>
        public static bool operator !=(Enum409 left, Enum409 right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Enum409"/>. </summary>
        public static implicit operator Enum409(string value) => new Enum409(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Enum409 other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Enum409 other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
