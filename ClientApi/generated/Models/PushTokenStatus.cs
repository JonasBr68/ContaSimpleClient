// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace ContasimpleAPI.Models
{
    /// <summary> The PushTokenStatus. </summary>
    public readonly partial struct PushTokenStatus : IEquatable<PushTokenStatus>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="PushTokenStatus"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public PushTokenStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string CreatedValue = "Created";
        private const string ExpiredValue = "Expired";
        private const string RemovedValue = "Removed";
        private const string NotRegisteredValue = "NotRegistered";
        private const string InvalidRegistrationValue = "InvalidRegistration";
        private const string MissingRegistrationValue = "MissingRegistration";

        /// <summary> Created. </summary>
        public static PushTokenStatus Created { get; } = new PushTokenStatus(CreatedValue);
        /// <summary> Expired. </summary>
        public static PushTokenStatus Expired { get; } = new PushTokenStatus(ExpiredValue);
        /// <summary> Removed. </summary>
        public static PushTokenStatus Removed { get; } = new PushTokenStatus(RemovedValue);
        /// <summary> NotRegistered. </summary>
        public static PushTokenStatus NotRegistered { get; } = new PushTokenStatus(NotRegisteredValue);
        /// <summary> InvalidRegistration. </summary>
        public static PushTokenStatus InvalidRegistration { get; } = new PushTokenStatus(InvalidRegistrationValue);
        /// <summary> MissingRegistration. </summary>
        public static PushTokenStatus MissingRegistration { get; } = new PushTokenStatus(MissingRegistrationValue);
        /// <summary> Determines if two <see cref="PushTokenStatus"/> values are the same. </summary>
        public static bool operator ==(PushTokenStatus left, PushTokenStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="PushTokenStatus"/> values are not the same. </summary>
        public static bool operator !=(PushTokenStatus left, PushTokenStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="PushTokenStatus"/>. </summary>
        public static implicit operator PushTokenStatus(string value) => new PushTokenStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is PushTokenStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(PushTokenStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
