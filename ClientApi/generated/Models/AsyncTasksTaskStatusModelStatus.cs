// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace ContasimpleAPI.Models
{
    /// <summary> The requested status. </summary>
    public readonly partial struct AsyncTasksTaskStatusModelStatus : IEquatable<AsyncTasksTaskStatusModelStatus>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="AsyncTasksTaskStatusModelStatus"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public AsyncTasksTaskStatusModelStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string WaitingValue = "Waiting";
        private const string WorkingValue = "Working";
        private const string DoneValue = "Done";
        private const string FailedValue = "Failed";
        private const string DoneButNotCompletedValue = "DoneButNotCompleted";

        /// <summary> Waiting. </summary>
        public static AsyncTasksTaskStatusModelStatus Waiting { get; } = new AsyncTasksTaskStatusModelStatus(WaitingValue);
        /// <summary> Working. </summary>
        public static AsyncTasksTaskStatusModelStatus Working { get; } = new AsyncTasksTaskStatusModelStatus(WorkingValue);
        /// <summary> Done. </summary>
        public static AsyncTasksTaskStatusModelStatus Done { get; } = new AsyncTasksTaskStatusModelStatus(DoneValue);
        /// <summary> Failed. </summary>
        public static AsyncTasksTaskStatusModelStatus Failed { get; } = new AsyncTasksTaskStatusModelStatus(FailedValue);
        /// <summary> DoneButNotCompleted. </summary>
        public static AsyncTasksTaskStatusModelStatus DoneButNotCompleted { get; } = new AsyncTasksTaskStatusModelStatus(DoneButNotCompletedValue);
        /// <summary> Determines if two <see cref="AsyncTasksTaskStatusModelStatus"/> values are the same. </summary>
        public static bool operator ==(AsyncTasksTaskStatusModelStatus left, AsyncTasksTaskStatusModelStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AsyncTasksTaskStatusModelStatus"/> values are not the same. </summary>
        public static bool operator !=(AsyncTasksTaskStatusModelStatus left, AsyncTasksTaskStatusModelStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AsyncTasksTaskStatusModelStatus"/>. </summary>
        public static implicit operator AsyncTasksTaskStatusModelStatus(string value) => new AsyncTasksTaskStatusModelStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AsyncTasksTaskStatusModelStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AsyncTasksTaskStatusModelStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
