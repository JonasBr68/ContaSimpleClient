// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace ContasimpleAPI.Models
{
    /// <summary> The Enum209. </summary>
    public readonly partial struct Enum209 : IEquatable<Enum209>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="Enum209"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public Enum209(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string InvoiceValue = "Invoice";
        private const string EstimateValue = "Estimate";
        private const string DeliveryNoteValue = "DeliveryNote";

        /// <summary> Invoice. </summary>
        public static Enum209 Invoice { get; } = new Enum209(InvoiceValue);
        /// <summary> Estimate. </summary>
        public static Enum209 Estimate { get; } = new Enum209(EstimateValue);
        /// <summary> DeliveryNote. </summary>
        public static Enum209 DeliveryNote { get; } = new Enum209(DeliveryNoteValue);
        /// <summary> Determines if two <see cref="Enum209"/> values are the same. </summary>
        public static bool operator ==(Enum209 left, Enum209 right) => left.Equals(right);
        /// <summary> Determines if two <see cref="Enum209"/> values are not the same. </summary>
        public static bool operator !=(Enum209 left, Enum209 right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="Enum209"/>. </summary>
        public static implicit operator Enum209(string value) => new Enum209(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is Enum209 other && Equals(other);
        /// <inheritdoc />
        public bool Equals(Enum209 other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
