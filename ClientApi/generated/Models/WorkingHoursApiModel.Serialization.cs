// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Xml.Linq;
using Azure.Core;

namespace ContasimpleAPI.Models
{
    public partial class WorkingHoursApiModel
    {
        internal static WorkingHoursApiModel DeserializeWorkingHoursApiModel(JsonElement element)
        {
            Optional<long> companyId = default;
            Optional<long> deletedByUserId = default;
            Optional<DateTimeOffset> deletedTime = default;
            Optional<string> description = default;
            Optional<string> employeeName = default;
            Optional<DateTimeOffset> endTime = default;
            Optional<DateTimeOffset> endTimeLogTime = default;
            Optional<long> endTimeLoggedByUserId = default;
            Optional<long> id = default;
            Optional<bool> isDeleted = default;
            Optional<long> minutesWorkedPerDay = default;
            Optional<DateTimeOffset> startTime = default;
            Optional<DateTimeOffset> startTimeLogTime = default;
            Optional<long> startTimeLoggedByUserId = default;
            Optional<long> userId = default;
            Optional<DateTimeOffset> utcEndTime = default;
            Optional<DateTimeOffset> utcStartTime = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("companyId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    companyId = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("deletedByUserId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    deletedByUserId = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("deletedTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    deletedTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("description"))
                {
                    description = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("employeeName"))
                {
                    employeeName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("endTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    endTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("endTimeLogTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    endTimeLogTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("endTimeLoggedByUserId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    endTimeLoggedByUserId = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    id = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("isDeleted"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    isDeleted = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("minutesWorkedPerDay"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    minutesWorkedPerDay = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("startTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    startTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("startTimeLogTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    startTimeLogTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("startTimeLoggedByUserId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    startTimeLoggedByUserId = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("userId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    userId = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("utcEndTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    utcEndTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
                if (property.NameEquals("utcStartTime"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    utcStartTime = property.Value.GetDateTimeOffset("O");
                    continue;
                }
            }
            return new WorkingHoursApiModel(Optional.ToNullable(companyId), Optional.ToNullable(deletedByUserId), Optional.ToNullable(deletedTime), description.Value, employeeName.Value, Optional.ToNullable(endTime), Optional.ToNullable(endTimeLogTime), Optional.ToNullable(endTimeLoggedByUserId), Optional.ToNullable(id), Optional.ToNullable(isDeleted), Optional.ToNullable(minutesWorkedPerDay), Optional.ToNullable(startTime), Optional.ToNullable(startTimeLogTime), Optional.ToNullable(startTimeLoggedByUserId), Optional.ToNullable(userId), Optional.ToNullable(utcEndTime), Optional.ToNullable(utcStartTime));
        }

        internal static WorkingHoursApiModel DeserializeWorkingHoursApiModel(XElement element)
        {
            long? companyId = default;
            long? deletedByUserId = default;
            DateTimeOffset? deletedTime = default;
            string description = default;
            string employeeName = default;
            DateTimeOffset? endTime = default;
            DateTimeOffset? endTimeLogTime = default;
            long? endTimeLoggedByUserId = default;
            long? id = default;
            bool? isDeleted = default;
            long? minutesWorkedPerDay = default;
            DateTimeOffset? startTime = default;
            DateTimeOffset? startTimeLogTime = default;
            long? startTimeLoggedByUserId = default;
            long? userId = default;
            DateTimeOffset? utcEndTime = default;
            DateTimeOffset? utcStartTime = default;
            if (element.Element("companyId") is XElement companyIdElement)
            {
                companyId = (long?)companyIdElement;
            }
            if (element.Element("deletedByUserId") is XElement deletedByUserIdElement)
            {
                deletedByUserId = (long?)deletedByUserIdElement;
            }
            if (element.Element("deletedTime") is XElement deletedTimeElement)
            {
                deletedTime = deletedTimeElement.GetDateTimeOffsetValue("O");
            }
            if (element.Element("description") is XElement descriptionElement)
            {
                description = (string)descriptionElement;
            }
            if (element.Element("employeeName") is XElement employeeNameElement)
            {
                employeeName = (string)employeeNameElement;
            }
            if (element.Element("endTime") is XElement endTimeElement)
            {
                endTime = endTimeElement.GetDateTimeOffsetValue("O");
            }
            if (element.Element("endTimeLogTime") is XElement endTimeLogTimeElement)
            {
                endTimeLogTime = endTimeLogTimeElement.GetDateTimeOffsetValue("O");
            }
            if (element.Element("endTimeLoggedByUserId") is XElement endTimeLoggedByUserIdElement)
            {
                endTimeLoggedByUserId = (long?)endTimeLoggedByUserIdElement;
            }
            if (element.Element("id") is XElement idElement)
            {
                id = (long?)idElement;
            }
            if (element.Element("isDeleted") is XElement isDeletedElement)
            {
                isDeleted = (bool?)isDeletedElement;
            }
            if (element.Element("minutesWorkedPerDay") is XElement minutesWorkedPerDayElement)
            {
                minutesWorkedPerDay = (long?)minutesWorkedPerDayElement;
            }
            if (element.Element("startTime") is XElement startTimeElement)
            {
                startTime = startTimeElement.GetDateTimeOffsetValue("O");
            }
            if (element.Element("startTimeLogTime") is XElement startTimeLogTimeElement)
            {
                startTimeLogTime = startTimeLogTimeElement.GetDateTimeOffsetValue("O");
            }
            if (element.Element("startTimeLoggedByUserId") is XElement startTimeLoggedByUserIdElement)
            {
                startTimeLoggedByUserId = (long?)startTimeLoggedByUserIdElement;
            }
            if (element.Element("userId") is XElement userIdElement)
            {
                userId = (long?)userIdElement;
            }
            if (element.Element("utcEndTime") is XElement utcEndTimeElement)
            {
                utcEndTime = utcEndTimeElement.GetDateTimeOffsetValue("O");
            }
            if (element.Element("utcStartTime") is XElement utcStartTimeElement)
            {
                utcStartTime = utcStartTimeElement.GetDateTimeOffsetValue("O");
            }
            return new WorkingHoursApiModel(companyId, deletedByUserId, deletedTime, description, employeeName, endTime, endTimeLogTime, endTimeLoggedByUserId, id, isDeleted, minutesWorkedPerDay, startTime, startTimeLogTime, startTimeLoggedByUserId, userId, utcEndTime, utcStartTime);
        }
    }
}
