// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using System.Xml.Linq;
using Azure.Core;

namespace ContasimpleAPI.Models
{
    public partial class FiscalRegionApiModel
    {
        internal static FiscalRegionApiModel DeserializeFiscalRegionApiModel(JsonElement element)
        {
            Optional<bool> allowCustomization = default;
            Optional<FiscalRegionApiModelCode> code = default;
            Optional<string> companyIdentifierName = default;
            Optional<string> culture = default;
            Optional<string> defaultTimeZone = default;
            Optional<bool> enableRe = default;
            Optional<long> id = default;
            Optional<string> name = default;
            Optional<string> reName = default;
            Optional<string> retentionName = default;
            Optional<bool> taxesEnabled = default;
            Optional<IReadOnlyList<VatModeApiModel>> vatModes = default;
            Optional<string> vatName = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("allowCustomization"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    allowCustomization = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("code"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    code = new FiscalRegionApiModelCode(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("companyIdentifierName"))
                {
                    companyIdentifierName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("culture"))
                {
                    culture = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("defaultTimeZone"))
                {
                    defaultTimeZone = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("enableRe"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    enableRe = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    id = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("name"))
                {
                    name = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("reName"))
                {
                    reName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("retentionName"))
                {
                    retentionName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("taxesEnabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    taxesEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("vatModes"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    List<VatModeApiModel> array = new List<VatModeApiModel>();
                    foreach (var item in property.Value.EnumerateArray())
                    {
                        array.Add(VatModeApiModel.DeserializeVatModeApiModel(item));
                    }
                    vatModes = array;
                    continue;
                }
                if (property.NameEquals("vatName"))
                {
                    vatName = property.Value.GetString();
                    continue;
                }
            }
            return new FiscalRegionApiModel(Optional.ToNullable(allowCustomization), Optional.ToNullable(code), companyIdentifierName.Value, culture.Value, defaultTimeZone.Value, Optional.ToNullable(enableRe), Optional.ToNullable(id), name.Value, reName.Value, retentionName.Value, Optional.ToNullable(taxesEnabled), Optional.ToList(vatModes), vatName.Value);
        }

        internal static FiscalRegionApiModel DeserializeFiscalRegionApiModel(XElement element)
        {
            bool? allowCustomization = default;
            FiscalRegionApiModelCode? code = default;
            string companyIdentifierName = default;
            string culture = default;
            string defaultTimeZone = default;
            bool? enableRe = default;
            long? id = default;
            string name = default;
            string reName = default;
            string retentionName = default;
            bool? taxesEnabled = default;
            string vatName = default;
            IReadOnlyList<VatModeApiModel> vatModes = default;
            if (element.Element("allowCustomization") is XElement allowCustomizationElement)
            {
                allowCustomization = (bool?)allowCustomizationElement;
            }
            if (element.Element("code") is XElement codeElement)
            {
                code = new FiscalRegionApiModelCode(codeElement.Value);
            }
            if (element.Element("companyIdentifierName") is XElement companyIdentifierNameElement)
            {
                companyIdentifierName = (string)companyIdentifierNameElement;
            }
            if (element.Element("culture") is XElement cultureElement)
            {
                culture = (string)cultureElement;
            }
            if (element.Element("defaultTimeZone") is XElement defaultTimeZoneElement)
            {
                defaultTimeZone = (string)defaultTimeZoneElement;
            }
            if (element.Element("enableRe") is XElement enableReElement)
            {
                enableRe = (bool?)enableReElement;
            }
            if (element.Element("id") is XElement idElement)
            {
                id = (long?)idElement;
            }
            if (element.Element("name") is XElement nameElement)
            {
                name = (string)nameElement;
            }
            if (element.Element("reName") is XElement reNameElement)
            {
                reName = (string)reNameElement;
            }
            if (element.Element("retentionName") is XElement retentionNameElement)
            {
                retentionName = (string)retentionNameElement;
            }
            if (element.Element("taxesEnabled") is XElement taxesEnabledElement)
            {
                taxesEnabled = (bool?)taxesEnabledElement;
            }
            if (element.Element("vatName") is XElement vatNameElement)
            {
                vatName = (string)vatNameElement;
            }
            var array = new List<VatModeApiModel>();
            foreach (var e in element.Elements("VatModeApiModel"))
            {
                array.Add(VatModeApiModel.DeserializeVatModeApiModel(e));
            }
            vatModes = array;
            return new FiscalRegionApiModel(allowCustomization, code, companyIdentifierName, culture, defaultTimeZone, enableRe, id, name, reName, retentionName, taxesEnabled, vatModes, vatName);
        }
    }
}
