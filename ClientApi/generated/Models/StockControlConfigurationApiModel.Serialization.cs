// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using Azure.Core;

namespace ContasimpleAPI.Models
{
    public partial class StockControlConfigurationApiModel
    {
        internal static StockControlConfigurationApiModel DeserializeStockControlConfigurationApiModel(JsonElement element)
        {
            Optional<bool> defaultAllowProductSellWhenNoStock = default;
            Optional<bool> defaultIsStockCompanyNotificationEnabled = default;
            Optional<bool> defaultIsStockControlEnabled = default;
            Optional<bool> defaultIsStockEmailNotificationEnabled = default;
            Optional<bool> defaultIsStockNotificationDisplayOnDashboardEnabled = default;
            Optional<bool> defaultIsStockNotificationEnabled = default;
            Optional<double> defaultMinUnitsTriggerAlarm = default;
            Optional<bool> deliveryNoteRecoverStockOnDelete = default;
            Optional<StockControlConfigurationApiModelDeliveryNoteStockControlType> deliveryNoteStockControlType = default;
            Optional<StockControlConfigurationApiModelEstimateStockControlType> estimateStockControlType = default;
            Optional<bool> invoiceRecoverStockOnDelete = default;
            Optional<StockControlConfigurationApiModelInvoiceStockControlType> invoiceStockControlType = default;
            Optional<string> notificationEmail = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("defaultAllowProductSellWhenNoStock"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    defaultAllowProductSellWhenNoStock = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("defaultIsStockCompanyNotificationEnabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    defaultIsStockCompanyNotificationEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("defaultIsStockControlEnabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    defaultIsStockControlEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("defaultIsStockEmailNotificationEnabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    defaultIsStockEmailNotificationEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("defaultIsStockNotificationDisplayOnDashboardEnabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    defaultIsStockNotificationDisplayOnDashboardEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("defaultIsStockNotificationEnabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    defaultIsStockNotificationEnabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("defaultMinUnitsTriggerAlarm"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    defaultMinUnitsTriggerAlarm = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("deliveryNoteRecoverStockOnDelete"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    deliveryNoteRecoverStockOnDelete = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("deliveryNoteStockControlType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    deliveryNoteStockControlType = new StockControlConfigurationApiModelDeliveryNoteStockControlType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("estimateStockControlType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    estimateStockControlType = new StockControlConfigurationApiModelEstimateStockControlType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("invoiceRecoverStockOnDelete"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    invoiceRecoverStockOnDelete = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("invoiceStockControlType"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    invoiceStockControlType = new StockControlConfigurationApiModelInvoiceStockControlType(property.Value.GetString());
                    continue;
                }
                if (property.NameEquals("notificationEmail"))
                {
                    notificationEmail = property.Value.GetString();
                    continue;
                }
            }
            return new StockControlConfigurationApiModel(Optional.ToNullable(defaultAllowProductSellWhenNoStock), Optional.ToNullable(defaultIsStockCompanyNotificationEnabled), Optional.ToNullable(defaultIsStockControlEnabled), Optional.ToNullable(defaultIsStockEmailNotificationEnabled), Optional.ToNullable(defaultIsStockNotificationDisplayOnDashboardEnabled), Optional.ToNullable(defaultIsStockNotificationEnabled), Optional.ToNullable(defaultMinUnitsTriggerAlarm), Optional.ToNullable(deliveryNoteRecoverStockOnDelete), Optional.ToNullable(deliveryNoteStockControlType), Optional.ToNullable(estimateStockControlType), Optional.ToNullable(invoiceRecoverStockOnDelete), Optional.ToNullable(invoiceStockControlType), notificationEmail.Value);
        }
    }
}
