// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Text.Json;
using System.Xml.Linq;
using Azure.Core;

namespace ContasimpleAPI.Models
{
    public partial class InvoiceLineApiModel
    {
        internal static InvoiceLineApiModel DeserializeInvoiceLineApiModel(JsonElement element)
        {
            Optional<string> concept = default;
            Optional<string> detailedDescription = default;
            Optional<double> discountPercentage = default;
            Optional<long> id = default;
            Optional<long> productId = default;
            Optional<string> productName = default;
            Optional<string> productSku = default;
            Optional<double> quantity = default;
            Optional<double> reAmount = default;
            Optional<double> rePercentage = default;
            Optional<double> totalTaxableAmount = default;
            Optional<double> unitTaxableAmount = default;
            Optional<double> vatAmount = default;
            Optional<double> vatPercentage = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("concept"))
                {
                    concept = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("detailedDescription"))
                {
                    detailedDescription = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("discountPercentage"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    discountPercentage = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("id"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    id = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("productId"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    productId = property.Value.GetInt64();
                    continue;
                }
                if (property.NameEquals("productName"))
                {
                    productName = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("productSku"))
                {
                    productSku = property.Value.GetString();
                    continue;
                }
                if (property.NameEquals("quantity"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    quantity = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("reAmount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    reAmount = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("rePercentage"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    rePercentage = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("totalTaxableAmount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    totalTaxableAmount = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("unitTaxableAmount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    unitTaxableAmount = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("vatAmount"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    vatAmount = property.Value.GetDouble();
                    continue;
                }
                if (property.NameEquals("vatPercentage"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        property.ThrowNonNullablePropertyIsNull();
                        continue;
                    }
                    vatPercentage = property.Value.GetDouble();
                    continue;
                }
            }
            return new InvoiceLineApiModel(concept.Value, detailedDescription.Value, Optional.ToNullable(discountPercentage), Optional.ToNullable(id), Optional.ToNullable(productId), productName.Value, productSku.Value, Optional.ToNullable(quantity), Optional.ToNullable(reAmount), Optional.ToNullable(rePercentage), Optional.ToNullable(totalTaxableAmount), Optional.ToNullable(unitTaxableAmount), Optional.ToNullable(vatAmount), Optional.ToNullable(vatPercentage));
        }

        internal static InvoiceLineApiModel DeserializeInvoiceLineApiModel(XElement element)
        {
            string concept = default;
            string detailedDescription = default;
            double? discountPercentage = default;
            long? id = default;
            long? productId = default;
            string productName = default;
            string productSku = default;
            double? quantity = default;
            double? reAmount = default;
            double? rePercentage = default;
            double? totalTaxableAmount = default;
            double? unitTaxableAmount = default;
            double? vatAmount = default;
            double? vatPercentage = default;
            if (element.Element("concept") is XElement conceptElement)
            {
                concept = (string)conceptElement;
            }
            if (element.Element("detailedDescription") is XElement detailedDescriptionElement)
            {
                detailedDescription = (string)detailedDescriptionElement;
            }
            if (element.Element("discountPercentage") is XElement discountPercentageElement)
            {
                discountPercentage = (double?)discountPercentageElement;
            }
            if (element.Element("id") is XElement idElement)
            {
                id = (long?)idElement;
            }
            if (element.Element("productId") is XElement productIdElement)
            {
                productId = (long?)productIdElement;
            }
            if (element.Element("productName") is XElement productNameElement)
            {
                productName = (string)productNameElement;
            }
            if (element.Element("productSku") is XElement productSkuElement)
            {
                productSku = (string)productSkuElement;
            }
            if (element.Element("quantity") is XElement quantityElement)
            {
                quantity = (double?)quantityElement;
            }
            if (element.Element("reAmount") is XElement reAmountElement)
            {
                reAmount = (double?)reAmountElement;
            }
            if (element.Element("rePercentage") is XElement rePercentageElement)
            {
                rePercentage = (double?)rePercentageElement;
            }
            if (element.Element("totalTaxableAmount") is XElement totalTaxableAmountElement)
            {
                totalTaxableAmount = (double?)totalTaxableAmountElement;
            }
            if (element.Element("unitTaxableAmount") is XElement unitTaxableAmountElement)
            {
                unitTaxableAmount = (double?)unitTaxableAmountElement;
            }
            if (element.Element("vatAmount") is XElement vatAmountElement)
            {
                vatAmount = (double?)vatAmountElement;
            }
            if (element.Element("vatPercentage") is XElement vatPercentageElement)
            {
                vatPercentage = (double?)vatPercentageElement;
            }
            return new InvoiceLineApiModel(concept, detailedDescription, discountPercentage, id, productId, productName, productSku, quantity, reAmount, rePercentage, totalTaxableAmount, unitTaxableAmount, vatAmount, vatPercentage);
        }
    }
}
