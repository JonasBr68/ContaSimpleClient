// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace ContasimpleAPI.Models
{
    /// <summary> The task current status. </summary>
    public readonly partial struct TaskStatusApiModelStatus : IEquatable<TaskStatusApiModelStatus>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="TaskStatusApiModelStatus"/> values are the same. </summary>
        /// <exception cref="ArgumentNullException"> <paramref name="value"/> is null. </exception>
        public TaskStatusApiModelStatus(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string WaitingValue = "Waiting";
        private const string WorkingValue = "Working";
        private const string DoneValue = "Done";
        private const string FailedValue = "Failed";
        private const string DoneButNotCompletedValue = "DoneButNotCompleted";

        /// <summary> Waiting. </summary>
        public static TaskStatusApiModelStatus Waiting { get; } = new TaskStatusApiModelStatus(WaitingValue);
        /// <summary> Working. </summary>
        public static TaskStatusApiModelStatus Working { get; } = new TaskStatusApiModelStatus(WorkingValue);
        /// <summary> Done. </summary>
        public static TaskStatusApiModelStatus Done { get; } = new TaskStatusApiModelStatus(DoneValue);
        /// <summary> Failed. </summary>
        public static TaskStatusApiModelStatus Failed { get; } = new TaskStatusApiModelStatus(FailedValue);
        /// <summary> DoneButNotCompleted. </summary>
        public static TaskStatusApiModelStatus DoneButNotCompleted { get; } = new TaskStatusApiModelStatus(DoneButNotCompletedValue);
        /// <summary> Determines if two <see cref="TaskStatusApiModelStatus"/> values are the same. </summary>
        public static bool operator ==(TaskStatusApiModelStatus left, TaskStatusApiModelStatus right) => left.Equals(right);
        /// <summary> Determines if two <see cref="TaskStatusApiModelStatus"/> values are not the same. </summary>
        public static bool operator !=(TaskStatusApiModelStatus left, TaskStatusApiModelStatus right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="TaskStatusApiModelStatus"/>. </summary>
        public static implicit operator TaskStatusApiModelStatus(string value) => new TaskStatusApiModelStatus(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is TaskStatusApiModelStatus other && Equals(other);
        /// <inheritdoc />
        public bool Equals(TaskStatusApiModelStatus other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
