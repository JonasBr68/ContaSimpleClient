// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using ContasimpleAPI.Models;

namespace ContasimpleAPI
{
    internal partial class AccountingInvoicesIssuedRestClient
    {
        private Uri endpoint;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of AccountingInvoicesIssuedRestClient. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="endpoint"> server parameter. </param>
        public AccountingInvoicesIssuedRestClient(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, Uri endpoint = null)
        {
            endpoint ??= new Uri("https://api.contasimple.com");

            this.endpoint = endpoint;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateListRequest(string period, string version, int? startIndex, int? numRows, Enum108? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/invoices/issued", false);
            if (startIndex != null)
            {
                uri.AppendQuery("startIndex", startIndex.Value, true);
            }
            if (numRows != null)
            {
                uri.AppendQuery("numRows", numRows.Value, true);
            }
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            return message;
        }

        /// <summary> Gets the issued invoices for the current company. </summary>
        /// <param name="period"> The String to use. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="startIndex"> The Integer to use. </param>
        /// <param name="numRows"> The Integer to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="period"/> or <paramref name="version"/> is null. </exception>
        public async Task<Response<ApiListResultInvoiceApiModel>> ListAsync(string period, string version, int? startIndex = null, int? numRows = null, Enum108? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateListRequest(period, version, startIndex, numRows, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultInvoiceApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiListResultInvoiceApiModel.DeserializeApiListResultInvoiceApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the issued invoices for the current company. </summary>
        /// <param name="period"> The String to use. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="startIndex"> The Integer to use. </param>
        /// <param name="numRows"> The Integer to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="period"/> or <paramref name="version"/> is null. </exception>
        public Response<ApiListResultInvoiceApiModel> List(string period, string version, int? startIndex = null, int? numRows = null, Enum108? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateListRequest(period, version, startIndex, numRows, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultInvoiceApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiListResultInvoiceApiModel.DeserializeApiListResultInvoiceApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateInvoiceRequest(string period, string version, string invoice, Enum109? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/invoices/issued", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", "text/html");
            request.Content = new StringRequestContent(invoice);
            return message;
        }

        /// <summary> Creates a new issued invoice. </summary>
        /// <param name="period"> The period where to create the invoice. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="invoice"> The invoice information. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="period"/>, <paramref name="version"/>, or <paramref name="invoice"/> is null. </exception>
        public async Task<Response<ApiResultInvoiceApiModel>> CreateInvoiceAsync(string period, string version, string invoice, Enum109? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (invoice == null)
            {
                throw new ArgumentNullException(nameof(invoice));
            }

            using var message = CreateCreateInvoiceRequest(period, version, invoice, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultInvoiceApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultInvoiceApiModel.DeserializeApiResultInvoiceApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Creates a new issued invoice. </summary>
        /// <param name="period"> The period where to create the invoice. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="invoice"> The invoice information. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="period"/>, <paramref name="version"/>, or <paramref name="invoice"/> is null. </exception>
        public Response<ApiResultInvoiceApiModel> CreateInvoice(string period, string version, string invoice, Enum109? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (invoice == null)
            {
                throw new ArgumentNullException(nameof(invoice));
            }

            using var message = CreateCreateInvoiceRequest(period, version, invoice, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultInvoiceApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultInvoiceApiModel.DeserializeApiResultInvoiceApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateCreateInvoiceRequest(string period, string version, CreateIssuedInvoiceApiModel invoice, Enum109? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/invoices/issued", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(invoice);
            request.Content = content;
            return message;
        }

        /// <summary> Creates a new issued invoice. </summary>
        /// <param name="period"> The period where to create the invoice. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="invoice"> The invoice information. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="period"/>, <paramref name="version"/>, or <paramref name="invoice"/> is null. </exception>
        public async Task<Response<ApiResultInvoiceApiModel>> CreateInvoiceAsync(string period, string version, CreateIssuedInvoiceApiModel invoice, Enum109? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (invoice == null)
            {
                throw new ArgumentNullException(nameof(invoice));
            }

            using var message = CreateCreateInvoiceRequest(period, version, invoice, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultInvoiceApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultInvoiceApiModel.DeserializeApiResultInvoiceApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Creates a new issued invoice. </summary>
        /// <param name="period"> The period where to create the invoice. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="invoice"> The invoice information. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="period"/>, <paramref name="version"/>, or <paramref name="invoice"/> is null. </exception>
        public Response<ApiResultInvoiceApiModel> CreateInvoice(string period, string version, CreateIssuedInvoiceApiModel invoice, Enum109? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (invoice == null)
            {
                throw new ArgumentNullException(nameof(invoice));
            }

            using var message = CreateCreateInvoiceRequest(period, version, invoice, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultInvoiceApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultInvoiceApiModel.DeserializeApiResultInvoiceApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetNextInvoiceNumberRequest(string period, string version, string format, Enum110? type, Enum111? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/invoices/issued/nextInvoiceNumber", false);
            if (format != null)
            {
                uri.AppendQuery("format", format, true);
            }
            if (type != null)
            {
                uri.AppendQuery("type", type.Value.ToString(), true);
            }
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Gets the next invoice number. </summary>
        /// <param name="period"> The period when to retrieve the invoice number. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="format"> The mask to use for generating the number. If null the default one is used. </param>
        /// <param name="type"> The invoice type to generate. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="period"/> or <paramref name="version"/> is null. </exception>
        public async Task<Response<ApiResultString>> GetNextInvoiceNumberAsync(string period, string version, string format = null, Enum110? type = null, Enum111? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateGetNextInvoiceNumberRequest(period, version, format, type, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultString value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultString.DeserializeApiResultString(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the next invoice number. </summary>
        /// <param name="period"> The period when to retrieve the invoice number. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="format"> The mask to use for generating the number. If null the default one is used. </param>
        /// <param name="type"> The invoice type to generate. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="period"/> or <paramref name="version"/> is null. </exception>
        public Response<ApiResultString> GetNextInvoiceNumber(string period, string version, string format = null, Enum110? type = null, Enum111? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateGetNextInvoiceNumberRequest(period, version, format, type, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultString value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultString.DeserializeApiResultString(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateOperationTypesRequest(string version, string period, Enum112? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/invoices/issued/operationTypes", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            return message;
        }

        /// <summary> Gets the list of valid operation types for the invoice type. </summary>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public async Task<Response<ApiListResultOperationTypeApiModel>> OperationTypesAsync(string version, string period, Enum112? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreateOperationTypesRequest(version, period, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultOperationTypeApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiListResultOperationTypeApiModel.DeserializeApiListResultOperationTypeApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the list of valid operation types for the invoice type. </summary>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public Response<ApiListResultOperationTypeApiModel> OperationTypes(string version, string period, Enum112? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreateOperationTypesRequest(version, period, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultOperationTypeApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiListResultOperationTypeApiModel.DeserializeApiListResultOperationTypeApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateSearchByNumberRequest(string period, string version, string query, Enum113? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/invoices/issued/search/number", false);
            if (query != null)
            {
                uri.AppendQuery("query", query, true);
            }
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            return message;
        }

        /// <summary> Searches the invoices with the given number. </summary>
        /// <param name="period"> The String to use. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="query"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="period"/> or <paramref name="version"/> is null. </exception>
        public async Task<Response<ApiListResultInvoiceApiModel>> SearchByNumberAsync(string period, string version, string query = null, Enum113? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateSearchByNumberRequest(period, version, query, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultInvoiceApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiListResultInvoiceApiModel.DeserializeApiListResultInvoiceApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Searches the invoices with the given number. </summary>
        /// <param name="period"> The String to use. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="query"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="period"/> or <paramref name="version"/> is null. </exception>
        public Response<ApiListResultInvoiceApiModel> SearchByNumber(string period, string version, string query = null, Enum113? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateSearchByNumberRequest(period, version, query, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultInvoiceApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiListResultInvoiceApiModel.DeserializeApiListResultInvoiceApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateDeleteInvoiceRequest(string period, long invoiceId, string version, Enum114? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Delete;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/invoices/issued/", false);
            uri.AppendPath(invoiceId, true);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Deletes the given invoice. </summary>
        /// <param name="period"> The period where to create the invoice. </param>
        /// <param name="invoiceId"> The invoice identifier to remove. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="period"/> or <paramref name="version"/> is null. </exception>
        public async Task<Response<ApiResultInt64>> DeleteInvoiceAsync(string period, long invoiceId, string version, Enum114? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateDeleteInvoiceRequest(period, invoiceId, version, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultInt64 value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultInt64.DeserializeApiResultInt64(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Deletes the given invoice. </summary>
        /// <param name="period"> The period where to create the invoice. </param>
        /// <param name="invoiceId"> The invoice identifier to remove. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="period"/> or <paramref name="version"/> is null. </exception>
        public Response<ApiResultInt64> DeleteInvoice(string period, long invoiceId, string version, Enum114? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }

            using var message = CreateDeleteInvoiceRequest(period, invoiceId, version, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultInt64 value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultInt64.DeserializeApiResultInt64(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateGetRequest(long invoiceId, string version, string period, Enum115? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/invoices/issued/", false);
            uri.AppendPath(invoiceId, true);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            return message;
        }

        /// <summary> Gets the entity information for the given invoice id. </summary>
        /// <param name="invoiceId"> The identifier of the invoice to retrieve. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public async Task<Response<ApiResultInvoiceApiModel>> GetAsync(long invoiceId, string version, string period, Enum115? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreateGetRequest(invoiceId, version, period, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultInvoiceApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultInvoiceApiModel.DeserializeApiResultInvoiceApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Gets the entity information for the given invoice id. </summary>
        /// <param name="invoiceId"> The identifier of the invoice to retrieve. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public Response<ApiResultInvoiceApiModel> Get(long invoiceId, string version, string period, Enum115? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreateGetRequest(invoiceId, version, period, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultInvoiceApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultInvoiceApiModel.DeserializeApiResultInvoiceApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateInvoiceRequest(string period, long invoiceId, string version, string invoice, Enum116? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/invoices/issued/", false);
            uri.AppendPath(invoiceId, true);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", "text/html");
            request.Content = new StringRequestContent(invoice);
            return message;
        }

        /// <summary> Updates and issued invoice. </summary>
        /// <param name="period"> The period where to create the invoice. </param>
        /// <param name="invoiceId"> The identifier of the invoice to update. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="invoice"> The invoice information. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="period"/>, <paramref name="version"/>, or <paramref name="invoice"/> is null. </exception>
        public async Task<Response<ApiResultInvoiceApiModel>> UpdateInvoiceAsync(string period, long invoiceId, string version, string invoice, Enum116? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (invoice == null)
            {
                throw new ArgumentNullException(nameof(invoice));
            }

            using var message = CreateUpdateInvoiceRequest(period, invoiceId, version, invoice, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultInvoiceApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultInvoiceApiModel.DeserializeApiResultInvoiceApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Updates and issued invoice. </summary>
        /// <param name="period"> The period where to create the invoice. </param>
        /// <param name="invoiceId"> The identifier of the invoice to update. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="invoice"> The invoice information. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="period"/>, <paramref name="version"/>, or <paramref name="invoice"/> is null. </exception>
        public Response<ApiResultInvoiceApiModel> UpdateInvoice(string period, long invoiceId, string version, string invoice, Enum116? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (invoice == null)
            {
                throw new ArgumentNullException(nameof(invoice));
            }

            using var message = CreateUpdateInvoiceRequest(period, invoiceId, version, invoice, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultInvoiceApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultInvoiceApiModel.DeserializeApiResultInvoiceApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateUpdateInvoiceRequest(string period, long invoiceId, string version, UpdateIssuedInvoiceApiModel invoice, Enum116? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Put;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/invoices/issued/", false);
            uri.AppendPath(invoiceId, true);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(invoice);
            request.Content = content;
            return message;
        }

        /// <summary> Updates and issued invoice. </summary>
        /// <param name="period"> The period where to create the invoice. </param>
        /// <param name="invoiceId"> The identifier of the invoice to update. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="invoice"> The invoice information. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="period"/>, <paramref name="version"/>, or <paramref name="invoice"/> is null. </exception>
        public async Task<Response<ApiResultInvoiceApiModel>> UpdateInvoiceAsync(string period, long invoiceId, string version, UpdateIssuedInvoiceApiModel invoice, Enum116? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (invoice == null)
            {
                throw new ArgumentNullException(nameof(invoice));
            }

            using var message = CreateUpdateInvoiceRequest(period, invoiceId, version, invoice, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultInvoiceApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultInvoiceApiModel.DeserializeApiResultInvoiceApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Updates and issued invoice. </summary>
        /// <param name="period"> The period where to create the invoice. </param>
        /// <param name="invoiceId"> The identifier of the invoice to update. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="invoice"> The invoice information. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="period"/>, <paramref name="version"/>, or <paramref name="invoice"/> is null. </exception>
        public Response<ApiResultInvoiceApiModel> UpdateInvoice(string period, long invoiceId, string version, UpdateIssuedInvoiceApiModel invoice, Enum116? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (invoice == null)
            {
                throw new ArgumentNullException(nameof(invoice));
            }

            using var message = CreateUpdateInvoiceRequest(period, invoiceId, version, invoice, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiResultInvoiceApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiResultInvoiceApiModel.DeserializeApiResultInvoiceApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateAttachRequest(long invoiceId, string version, string period, Enum117? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/invoices/issued/", false);
            uri.AppendPath(invoiceId, true);
            uri.AppendPath("/attach", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            return message;
        }

        /// <summary> Attaches a file or files to the given invoice. </summary>
        /// <param name="invoiceId"> The identifier of the invoice to attach files to. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public async Task<Response<ApiListResultFileApiModel>> AttachAsync(long invoiceId, string version, string period, Enum117? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreateAttachRequest(invoiceId, version, period, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultFileApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiListResultFileApiModel.DeserializeApiListResultFileApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Attaches a file or files to the given invoice. </summary>
        /// <param name="invoiceId"> The identifier of the invoice to attach files to. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public Response<ApiListResultFileApiModel> Attach(long invoiceId, string version, string period, Enum117? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreateAttachRequest(invoiceId, version, period, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultFileApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiListResultFileApiModel.DeserializeApiListResultFileApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateAttachmentsRequest(long invoiceId, string version, string period, int? startIndex, int? numRows, string sort, Enum118? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/invoices/issued/", false);
            uri.AppendPath(invoiceId, true);
            uri.AppendPath("/attachments", false);
            if (startIndex != null)
            {
                uri.AppendQuery("startIndex", startIndex.Value, true);
            }
            if (numRows != null)
            {
                uri.AppendQuery("numRows", numRows.Value, true);
            }
            if (sort != null)
            {
                uri.AppendQuery("sort", sort, true);
            }
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            return message;
        }

        /// <summary> Returns the list of attachments of this invoice. </summary>
        /// <param name="invoiceId"> The identifier of the invoice to attach files to. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="startIndex"> The Integer to use. </param>
        /// <param name="numRows"> The Integer to use. </param>
        /// <param name="sort"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public async Task<Response<ApiListResultFileApiModel>> AttachmentsAsync(long invoiceId, string version, string period, int? startIndex = null, int? numRows = null, string sort = null, Enum118? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreateAttachmentsRequest(invoiceId, version, period, startIndex, numRows, sort, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultFileApiModel value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiListResultFileApiModel.DeserializeApiListResultFileApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Returns the list of attachments of this invoice. </summary>
        /// <param name="invoiceId"> The identifier of the invoice to attach files to. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="startIndex"> The Integer to use. </param>
        /// <param name="numRows"> The Integer to use. </param>
        /// <param name="sort"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public Response<ApiListResultFileApiModel> Attachments(long invoiceId, string version, string period, int? startIndex = null, int? numRows = null, string sort = null, Enum118? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreateAttachmentsRequest(invoiceId, version, period, startIndex, numRows, sort, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ApiListResultFileApiModel value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = ApiListResultFileApiModel.DeserializeApiListResultFileApiModel(document.RootElement);
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreatePdfRequest(long invoiceId, string version, string period, Enum122? acceptLanguage)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/invoices/issued/", false);
            uri.AppendPath(invoiceId, true);
            uri.AppendPath("/pdf", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json, application/xml, text/xml");
            return message;
        }

        /// <summary> Downloads the PDF for the given invoice. </summary>
        /// <param name="invoiceId"> The identifier of the invoice to retrieve. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public async Task<Response<object>> PdfAsync(long invoiceId, string version, string period, Enum122? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreatePdfRequest(invoiceId, version, period, acceptLanguage);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        object value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = document.RootElement.GetObject();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Downloads the PDF for the given invoice. </summary>
        /// <param name="invoiceId"> The identifier of the invoice to retrieve. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/> or <paramref name="period"/> is null. </exception>
        public Response<object> Pdf(long invoiceId, string version, string period, Enum122? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }

            using var message = CreatePdfRequest(invoiceId, version, period, acceptLanguage);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        object value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        value = document.RootElement.GetObject();
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateSendRequest(long invoiceId, string version, string period, string message, Enum130? acceptLanguage)
        {
            var message0 = _pipeline.CreateMessage();
            var request = message0.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/invoices/issued/", false);
            uri.AppendPath(invoiceId, true);
            uri.AppendPath("/send", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", "text/html");
            request.Content = new StringRequestContent(message);
            return message0;
        }

        /// <summary> Sends the invoice by email. </summary>
        /// <param name="invoiceId"> The Integer to use. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="message"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/>, <paramref name="period"/>, or <paramref name="message"/> is null. </exception>
        public async Task<Response<ApiResultBoolean>> SendAsync(long invoiceId, string version, string period, string message, Enum130? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }

            using var message0 = CreateSendRequest(invoiceId, version, period, message, acceptLanguage);
            await _pipeline.SendAsync(message0, cancellationToken).ConfigureAwait(false);
            switch (message0.Response.Status)
            {
                case 200:
                    {
                        ApiResultBoolean value = default;
                        using var document = await JsonDocument.ParseAsync(message0.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultBoolean.DeserializeApiResultBoolean(document.RootElement);
                        return Response.FromValue(value, message0.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message0.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Sends the invoice by email. </summary>
        /// <param name="invoiceId"> The Integer to use. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="message"> The String to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/>, <paramref name="period"/>, or <paramref name="message"/> is null. </exception>
        public Response<ApiResultBoolean> Send(long invoiceId, string version, string period, string message, Enum130? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }

            using var message0 = CreateSendRequest(invoiceId, version, period, message, acceptLanguage);
            _pipeline.Send(message0, cancellationToken);
            switch (message0.Response.Status)
            {
                case 200:
                    {
                        ApiResultBoolean value = default;
                        using var document = JsonDocument.Parse(message0.Response.ContentStream);
                        value = ApiResultBoolean.DeserializeApiResultBoolean(document.RootElement);
                        return Response.FromValue(value, message0.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message0.Response);
            }
        }

        internal HttpMessage CreateSendRequest(long invoiceId, string version, string period, SendDocumentApiModel message, Enum130? acceptLanguage)
        {
            var message0 = _pipeline.CreateMessage();
            var request = message0.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/api/v", false);
            uri.AppendPath(version, true);
            uri.AppendPath("/accounting/", false);
            uri.AppendPath(period, true);
            uri.AppendPath("/invoices/issued/", false);
            uri.AppendPath(invoiceId, true);
            uri.AppendPath("/send", false);
            request.Uri = uri;
            if (acceptLanguage != null)
            {
                request.Headers.Add("Accept-Language", acceptLanguage.Value.ToString());
            }
            request.Headers.Add("Accept", "application/json, text/json");
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(message);
            request.Content = content;
            return message0;
        }

        /// <summary> Sends the invoice by email. </summary>
        /// <param name="invoiceId"> The Integer to use. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="message"> The SendDocumentApiModel to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/>, <paramref name="period"/>, or <paramref name="message"/> is null. </exception>
        public async Task<Response<ApiResultBoolean>> SendAsync(long invoiceId, string version, string period, SendDocumentApiModel message, Enum130? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }

            using var message0 = CreateSendRequest(invoiceId, version, period, message, acceptLanguage);
            await _pipeline.SendAsync(message0, cancellationToken).ConfigureAwait(false);
            switch (message0.Response.Status)
            {
                case 200:
                    {
                        ApiResultBoolean value = default;
                        using var document = await JsonDocument.ParseAsync(message0.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        value = ApiResultBoolean.DeserializeApiResultBoolean(document.RootElement);
                        return Response.FromValue(value, message0.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message0.Response).ConfigureAwait(false);
            }
        }

        /// <summary> Sends the invoice by email. </summary>
        /// <param name="invoiceId"> The Integer to use. </param>
        /// <param name="version"> The String to use. </param>
        /// <param name="period"> The String to use. </param>
        /// <param name="message"> The SendDocumentApiModel to use. </param>
        /// <param name="acceptLanguage"> The request language. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        /// <exception cref="ArgumentNullException"> <paramref name="version"/>, <paramref name="period"/>, or <paramref name="message"/> is null. </exception>
        public Response<ApiResultBoolean> Send(long invoiceId, string version, string period, SendDocumentApiModel message, Enum130? acceptLanguage = null, CancellationToken cancellationToken = default)
        {
            if (version == null)
            {
                throw new ArgumentNullException(nameof(version));
            }
            if (period == null)
            {
                throw new ArgumentNullException(nameof(period));
            }
            if (message == null)
            {
                throw new ArgumentNullException(nameof(message));
            }

            using var message0 = CreateSendRequest(invoiceId, version, period, message, acceptLanguage);
            _pipeline.Send(message0, cancellationToken);
            switch (message0.Response.Status)
            {
                case 200:
                    {
                        ApiResultBoolean value = default;
                        using var document = JsonDocument.Parse(message0.Response.ContentStream);
                        value = ApiResultBoolean.DeserializeApiResultBoolean(document.RootElement);
                        return Response.FromValue(value, message0.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message0.Response);
            }
        }
    }
}
